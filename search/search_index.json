{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Linux Upskill Challenge","text":""},{"location":"#learn-the-skills-required-to-sysadmin-a-remote-linux-server-from-the-command-line","title":"Learn the skills required to sysadmin a remote Linux server from the command line.","text":"<p>A month-long course aimed at those who aspire to get Linux-related jobs in the industry - junior Linux sysadmin, DevOps-related work, and similar. Server focused and command line, but assumes essentially no prior knowledge, and starts off very gently - designed to be well-suited to a Windows or Apple person as well as those that already using Linux in some form.</p> <p>This was a paid course in the past, but is now free and fully open source - so costs you nothing but your time!</p>"},{"location":"#whats-it-about","title":"What\u2019s it about?","text":"<ol> <li>Learn Linux enough to admin your own server</li> <li>The focus is on practical skills</li> <li>Heavily hands-on</li> <li>Acquire skills during a month, committing of 1-2 hours each day</li> <li>Lots of curated external links</li> <li>Much less \u2018formal\u2019 than RHEL or Linux Foundation training</li> </ol>"},{"location":"#start-here","title":"Start Here","text":"<p>First, take a look at the FAQ and understand how the challenge works, most of your questions will be answered there.</p> <p>There\u2019s also a Linux User Group(LUG) talk about it with slides, podcast and vidcast material available: KWLUG Meeting - Linux Upskill Challenge</p> <p>If you\u2019re keen to do this, then you will need your own Internet-exposed server - but full instructions on how to set this up for free or cheap are also provided.</p> <p>The course restarts on the first Monday of each month so don\u2019t worry if you can\u2019t make it on your first round!</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Day 0 - Creating Your Own Server: how to setup your lab in AWS, Azure, Google Cloud, Oracle Cloud, Digital Ocean, Linode, Vultr and on a local server too!</li> <li>Day 1 - Get to know your server: Starting with <code>ssh</code>-ing in and some simple commands like: <code>ls</code>, <code>uptime</code>, <code>free</code>, <code>df -h</code>, <code>uname -a</code>. Extensions on doing passwordless login with public keys and and an <code>ssh</code> config file.</li> <li>Day 2 - Basic navigation: Basic navigation, the \u201cman\u201d pages, file hierarchy</li> <li>Day 3 - Power trip!: Working with <code>sudo</code>, <code>uptime</code>, <code>timezones</code>, changing your hostname</li> <li>Day 4 - Installing software, exploring the file structure: Using \u2018apt\u2019 to find and install software. Use of <code>mc</code> to explore the filesystem. Looking at the contents of: <code>/etc/passwd</code>, <code>/etc/ssh/sshd_config</code> and <code>/var/log/auth.log</code></li> <li>Day 5 - More or less\u2026: Using <code>more</code>, <code>less</code> and navigating in these. Dotfiles, history, tab completion, and using the <code>nano</code> txt editor</li> <li>Day 6 - Editing with \u201cvim\u201d: Learning <code>vim</code>, the minimal knowledge, but also via <code>vimtutor</code></li> <li>Day 7 - The server and its services: Installing Apache2, stopping and starting, altering the content, reading logs</li> <li>Day 8 - The infamous \u201cgrep\u201d and other text processors: Hands-on with text tools like <code>grep</code>, <code>cat</code>, <code>more</code>, <code>less</code>, <code>cut</code>, <code>awk</code> and <code>tail</code> - and piping of course. (and a wave to <code>awk</code> and <code>sed</code>)</li> <li>Day 9 - Diving into networking: Looking at open ports with <code>ss</code>, and a nod to <code>netstat</code>, install <code>nmap</code> and test. Install <code>ufw</code>, set up, enable and test etc. Discuss security resonsibilities as the sysadmin.</li> <li>Day 10 - Scheduling tasks: Covering <code>cron</code>, <code>at</code>, and systemd timers</li> <li>Day 11 - Finding things\u2026: Finding things with: <code>locate</code>, <code>find</code>, <code>grep</code>, <code>which</code></li> <li>Day 12 - Transferring files: SFTP, the technology, clients, and copying up and down</li> <li>Day 13 - Users and Groups: Using <code>adduser</code>, <code>visudo</code> to setup up a restricted \u201chelper\u201d to manage our host</li> <li>Day 14 - Who has permission?: Permissions, users, groups, (ACLS and SELinux in the Extension)</li> <li>Day 15 - Deeper into repositories\u2026: Repositories in more detail, how to enable \u201cMultiverse\u201d, the role of PPAs in Ubuntu, enabling and installing from them</li> <li>Day 16 - Archiving and compressing: Understanding and using <code>tar</code> and <code>gzip</code></li> <li>Day 17 - Build from the source: Installing from source. Discussion, using <code>wget</code> to get a tarball, <code>tar</code> to extract and then configure, make and install. Discussion of security, maintenance issues.</li> <li>Day 18 - Logs, monitoring and troubleshooting: Log management and rotation, <code>logrotate</code></li> <li>Day 19 - Inodes, symlinks and other shortcuts: Inodes, hard links symlinks and <code>stat</code></li> <li>Day 20 - Scripting: Understanding how scripting work in Linux, the shebang, permissions and $PATH. A couple of simple sample scripts based on the filtering of logs we\u2019ve been doing. Resources to explore further.</li> <li>Day 21 - What\u2019s next?: Closing the course with some suggestions.</li> </ul>"},{"location":"00-AWS-Free-Tier/","title":"Day 0 - Creating Your Own Server - with AWS Free Tier","text":"<p>Refer to Day 0 - Get Your Own Server to review your options:</p> <ul> <li>In a Local Server</li> <li>In the Cloud (with providers like DigitalOcean, Linode and Vultr)</li> <li>In the Cloud (with providers like AWS, Azure and Google Cloud)</li> </ul>"},{"location":"00-AWS-Free-Tier/#aws-free-tier-is-it-always-free","title":"AWS free-tier, is it always free?","text":"<p>The AWS Free Tier is designed to allow new users to explore and test various AWS services without incurring any costs for 12 months following the AWS sign-up date, subject to certain usage limits. When your 12 month free usage term expires or if your application use exceeds the tiers, you simply pay standard, pay-as-you-go service rates. You can extend that free usage with an Educate Pack, if you are eligible.</p>"},{"location":"00-AWS-Free-Tier/#signing-up-with-aws-educate-pack","title":"Signing up with AWS Educate pack:","text":"<ul> <li>Go to the AWS Educate website at https://aws.amazon.com/education/awseducate/</li> <li>Click on the \u201cJoin AWS Educate\u201d button located at the top right corner of the page.</li> <li>Choose the option that best describes you, whether you are a student or an educator.</li> <li>Create an AWS Educate account by filling out the required information, including your name, email address, and the name of your school or institution.</li> <li>Once you have created your account, you can access the AWS Educate Starter Account, which includes $100 in AWS Promotional Credits, free access to over 25 AWS services, and self-paced labs and tutorials to help you get started with AWS.</li> </ul> <p>Please note that the AWS Educate program is intended for students and educators who are interested in learning about cloud computing and AWS services. In order to be eligible for the program, you will need to provide proof of your status as a student or educator.</p>"},{"location":"00-AWS-Free-Tier/#signing-up-with-aws","title":"Signing up with AWS","text":"<p>Sign-up is fairly simple - just provide your email address and a password of your choosing - along with a phone number for a 2FA - a second method of authentication. You will need to also provide your VISA or other credit card information.</p> <ul> <li>For Support Plan, choose \u201cBasic Plan/Free\u201d</li> </ul> <p>Logout, then login again, and then select:</p> <ul> <li>Services - from the top menu</li> <li>EC2 - from the list of services</li> </ul> <p>In \u201cAWS speak\u201d the server we\u2019ll create will be an \u201cEC2 compute instance\u201d - so now choose \u201cLaunch Instance\u201d. You will be presented with several image options - choose one with \u201cUbuntu Server LTS\u201d in the name. At the next screen you\u2019ll have options for the type - typically only \u201ct2.micro\u201d is eligible for the Free Tier, but this is fine, so select to \u201creview and Launch\u201d At the review screen there will be an option \u201cSecurity Groups\u201d - this is in fact a firewall configuration which AWS provides by default. While a good thing in general, for our purposes we want our server completely exposed, so we\u2019ll edit this to effectively disable it, like this:</p> <ul> <li>Select \u201cConfigure Security Group\u201d</li> <li>Select \u201cAdd Rule\u201d</li> <li>Type: \u201cAll traffic\u201d, Source: \u201cAnywhere\u201d</li> </ul> <p>This opens all ports and protocols to access from anywhere. While this might be unwise for a production server, it is what we want for this course.</p> <p>Now select \u201cLaunch\u201d. When prompted for a key pair, create one.</p> <p>Your server instance should now launch, and you can login to it by:</p> <ul> <li>Services, EC2, Running instances, Connect</li> </ul>"},{"location":"00-AWS-Free-Tier/#remote-access-via-ssh","title":"Remote access via SSH","text":"<p>You should see an \u201cIPv4\u201d entry for your server, this is its unique Internet IP address, and is how you\u2019ll connect to it via SSH (the Secure Shell protocol) - something we\u2019ll be covering in the first lesson.</p> <p>This video, How to Set Up AWS EC2 and Connect to Linux Instance with PuTTY, gives a good overview of the process.</p> <p>You will be logging in as the user ubuntu. It has been added to the \u2018adm\u2019 and \u2018sudo\u2019 groups, which on an Ubuntu system gives it access to read various logs - and to \u201cbecome root\u201d as required via the sudo command.</p>"},{"location":"00-AWS-Free-Tier/#you-are-now-a-sysadmin","title":"You are now a sysadmin","text":"<p>Confirm that you can do administrative tasks by typing:</p> <p><code>sudo apt update</code></p> <p>(Normally you\u2019d expect this would prompt you to confirm your password, but because you\u2019re using public key authentication the system hasn\u2019t prompted you to set up a password - and AWS have configured sudo to not request one for \u201cubuntu\u201d).</p> <p>Then:</p> <p><code>sudo apt upgrade</code></p> <p>Don\u2019t worry too much about the output and messages from these commands, but it should be clear whether they succeeded or not. (Reply to any prompts by taking the default option). These commands are how you force the installation of updates on an Ubuntu Linux system, and only an administrator can do them.</p> <p>To logout, type logout or exit.</p> <p>Your server is now all set up and ready for the course!</p> <p>Note that:</p> <ul> <li>This server is now running, and completely exposed to the whole of the Internet</li> <li>You alone are responsible for managing it</li> <li>You have just installed the latest updates, so it should be secure for now</li> </ul> <p>Now you are ready to start the challenge. Day 1, here we go!</p>"},{"location":"00-Azure-Free-Tier/","title":"Day 0 - Creating Your Own Server - with Azure Free Credits","text":"<p>Refer to Day 0 - Get Your Own Server to review your options:</p> <ul> <li>In a Local Server</li> <li>In the Cloud (with providers like DigitalOcean, Linode and Vultr)</li> <li>In the Cloud (with providers like AWS, Azure and Google Cloud)</li> </ul>"},{"location":"00-Azure-Free-Tier/#signing-up-with-azure","title":"Signing up with Azure","text":"<p>Sign-up is fairly simple - just provide your email address and a password of your choosing - along with a phone number for a 2FA - a second method of authentication. Azure can be a bit funny about \u2018corporate\u2019 email addresses, eg using a work address or your own domain. Create a new @outlook or @gmail.com account if so using the link on the sign-up page. You will need to also provide your VISA or other credit card information.</p> <ul> <li>Click \u2018start building in azure\u2019</li> <li>Click \u2018Deploy a virtual machine\u2019</li> <li>Click \u2018Create a linux virtual machine\u2019</li> <li>Search and select Ubuntu Server LTS</li> <li>Use the Standard _D2s_v3 size - this should be comfortably covered by your trial credits for the duration of the course</li> <li>Ensure \u2018SSH Public Key\u2019 for authentication and \u2018generate new key pair\u2019 for SSH Public Key source are selected</li> <li>Leave \u2018allow selected ports\u2019 as \u2018ssh (22)\u2019 for now</li> <li>Click \u2018Review + Create\u2019</li> <li>Azure will generate and download the private key file to SSH onto the box -</li> <li>(Windows) double-click this to open on Windows and it will be added to your cert store on the machine</li> <li>(Mac OS X and Linux) run the command \u2018sudo ssh-add -K /link-to-downloaded-file\u2019 </li> <li>Note: if the above command doesn\u2019t work for you then try running without sudo. If you get any error related to permissions then try running \u2018chmod 400 filename\u2019 first.</li> <li>Connect to the machine using <code>ssh azureuser@PUBLICIP</code></li> </ul> <p>Now to fully expose the machine and all ports to the internet:</p> <ul> <li>Navigate to https://portal.azure.com/#home</li> <li>Select \u2018Virtual Machines\u2019</li> <li>Select your created virtual machine and select \u2018Networking\u2019 from the settings pane</li> <li>Click \u2018Inbound Port Rules\u2019 and \u2018Add inbound port rule\u2019</li> <li>Set \u2018source port ranges\u2019 and \u2018destination port ranges\u2019 to \u2018*\u2019 and set \u2018Source\u2019 and \u2018Destination\u2019 to \u2018any\u2019. Ensure protocol is set to \u2018any\u2019 and action is set to \u2018allow\u2019. Set the priority to \u2018100\u2019 and create an appropriate name</li> <li>Click \u2018Outbound port rules\u2019 and \u2018add outbound port rule\u2019</li> <li>Set \u2018source port ranges\u2019 and \u2018destination port ranges\u2019 to \u2018*\u2019 and set \u2018Source\u2019 and \u2018Destination\u2019 to \u2018any\u2019. Ensure protocol is set to \u2018any\u2019 and action is set to \u2018allow\u2019. Set the priority to \u2018101\u2019 and create an appropriate name</li> </ul> <p>This opens all ports and protocols to access from anywhere. While this might be unwise for a production server, it is what we want for this course.</p>"},{"location":"00-Azure-Free-Tier/#remote-access-via-ssh","title":"Remote access via SSH","text":"<p>Ensure your machine is \u2018running\u2019 (if not, click \u2018start\u2019) and connect using the \u2018connect -&gt; ssh\u2019 dropdown and following instructions</p> <p>You will be logging in as the user azureuser. It has been added to the \u2018adm\u2019 and \u2018sudo\u2019 groups, which on an Ubuntu system gives it access to read various logs - and to \u201cbecome root\u201d as required via the sudo command.</p>"},{"location":"00-Azure-Free-Tier/#you-are-now-a-sysadmin","title":"You are now a sysadmin","text":"<p>Confirm that you can do administrative tasks by typing:</p> <p><code>sudo apt update</code></p> <p>(Normally you\u2019d expect this would prompt you to confirm your password, but because you\u2019re using public key authentication the system hasn\u2019t prompted you to set up a password - and Azure have configured sudo to not request one for \u201cazureuser\u201d).</p> <p>Then:</p> <p><code>sudo apt upgrade</code></p> <p>Don\u2019t worry too much about the output and messages from these commands, but it should be clear whether they succeeded or not. (Reply to any prompts by taking the default option). These commands are how you force the installation of updates on an Ubuntu Linux system, and only an administrator can do them.</p> <p>To logout, type logout or exit.</p> <p>Your server is now all set up and ready for the course!</p> <p>Note that:</p> <ul> <li>This server is now running, and completely exposed to the whole of the Internet</li> <li>You alone are responsible for managing it</li> <li>You have just installed the latest updates, so it should be secure for now</li> </ul> <p>Now you are ready to start the challenge. Day 1, here we go!</p>"},{"location":"00-Google-Cloud/","title":"Day 0 - Creating Your Own Server - with Google Cloud Platform Free Tier","text":"<p>Refer to Day 0 - Get Your Own Server to review your options:</p> <ul> <li>In a Local Server</li> <li>In the Cloud (with providers like DigitalOcean, Linode and Vultr)</li> <li>In the Cloud (with providers like AWS, Azure and Google Cloud)</li> </ul>"},{"location":"00-Google-Cloud/#signing-up-with-gcp","title":"Signing up with GCP","text":"<p>Sign-up is fairly simple - just provide your email address and a password of your choosing - along with a phone number for a 2FA - a second method of authentication. You will need to also provide your VISA or other credit card information.</p> <ul> <li>Choose \u201cCompute Engine\u201d and click \u201cVM Instances\u201d.</li> <li>Create a new instance.</li> <li>Select whichever regions you want.</li> <li>For Machine Configuration select series and set to \u201cE2\u201d and Machine type to \u201ce2-micro\u201d.</li> <li>Change boot disk to \u201cUbuntu LTS\u201d</li> </ul> <p>Now after we create our own server, we need to open all ports and protocols to access from anywhere. While this might be unwise for a production server, it is what we want for this course.</p> <p>Navigate to your GCP home page and goto Networking &gt; VPC Network &gt; Firewall &gt; Create Firewall</p> <p>Set \u201cDirection of Traffic\u201d to \u201cIngress\u201d Set \u201cTarget\u201d to \u201cAll instances in the network\u201d Set \u201cSource Filter\u201d to \u201cIP Ranges\u201d Set \u201cSource IP Ranges\u201d to  \u201c0.0.0.0/0\u201d Set \u201cProtocols and Ports\u201d to \u201cAllow All\u201d Create and repeat the steps by creating a new Firewall and setting \u201cDirection of Traffic\u201d to \u201cEgress\u201d</p>"},{"location":"00-Google-Cloud/#logging-in-for-the-first-time","title":"Logging in for the first time","text":"<p>Select your instance and click \u201cssh\u201d it will open a new window console. To access the root, type \u201csudo -i passwd\u201d in the command line then set your own password. Log in by typing \u201csu\u201d and \u201cpassword\u201d. Note that the password won\u2019t show as you type or paste it.</p>"},{"location":"00-Google-Cloud/#setting-up-ssh","title":"Setting up SSH","text":"<p>You can also refer to https://cloud.google.com/compute/docs/instances/connecting-advanced#thirdpartytools if you intend to access your server via third-party tools (e.g. Putty).</p>"},{"location":"00-Google-Cloud/#you-are-now-a-sysadmin","title":"You are now a sysadmin","text":"<p>Confirm that you can do administrative tasks by typing:</p> <p><code>sudo apt update</code></p> <p>Then:</p> <p><code>sudo apt upgrade</code></p> <p>Don\u2019t worry too much about the output and messages from these commands, but it should be clear whether they succeeded or not. (Reply to any prompts by taking the default option). These commands are how you force the installation of updates on an Ubuntu Linux system, and only an administrator can do them.</p> <p>To logout, type logout or exit.</p> <p>Your server is now all set up and ready for the course!</p> <p>Note that:</p> <ul> <li>This server is now running, and completely exposed to the whole of the Internet</li> <li>You alone are responsible for managing it</li> <li>You have just installed the latest updates, so it should be secure for now</li> </ul> <p>Now you are ready to start the challenge. Day 1, here we go!</p>"},{"location":"00-Local-Server/","title":"Day 0 - Creating Your Own Local Server","text":"<p>Refer to Day 0 - Get Your Own Server to review your options:</p> <ul> <li>In a Local Server</li> <li>In the Cloud (with providers like DigitalOcean, Linode and Vultr)</li> <li>In the Cloud (with providers like AWS, Azure and Google Cloud)</li> </ul>"},{"location":"00-Local-Server/#its-difficult-to-create-a-server-in-cloud-without-a-credit-card","title":"It\u2019s difficult to create a server in cloud without a credit card","text":"<p>We normally recommend using Amazon\u2019s AWS \u201cFree Tier\u201d or Digital Ocean - but both require that you have a credit card. The same is true of the Microsoft Azure, Google\u2019s GCP and the vast majority of providers listed at Low End Box (https://lowendbox.com/).</p> <p>Some will accept PayPal, or Bitcoin - but typically those who don\u2019t have a credit card don\u2019t have these either.</p> <p>WARNING: If you go searching too deeply for options in this area, you\u2019re very likely to come across a range of scammy, fake, or fraudulent sites. While we\u2019ve tried to eliminate these from the links below, please do be careful! It should go without saying that none of these are \u201caffiliate\u201d links, and we get no kick-backs from any of them :-)</p>"},{"location":"00-Local-Server/#cards-that-work-as-or-like-credit-cards","title":"Cards that work as, or like, credit cards","text":"<ul> <li>Debit cards</li> <li>https://www.paysafecard.com/</li> <li>privacy.com (US-only)</li> </ul>"},{"location":"00-Local-Server/#but-what-if-i-dont-want-to-use-a-cloud-provider-you-can-just-work-with-a-local-virtual-machine","title":"But what if I don\u2019t want to use a cloud provider? You can just work with a local virtual machine","text":"<p>You can run the challenge on a home server and all the commands will work as they would on a cloud server. However, not being exposed to the wild certainly loses the feel of what real sysadmins have to face.</p> <p>If you set your own VM at a private server, go for the minimum requirements like 1GHz CPU core, 1GB RAM, and a couple of gigs of disk space. You can always adapt this to your heart\u2019s desire (or how much hardware you have available).</p> <p>Our recommendation is: use a cloud server if you can, to get the full experience, but don\u2019t get limited by it. This is your server.</p>"},{"location":"00-Local-Server/#download-the-linux-iso","title":"Download the Linux ISO","text":"<p>Go to the Official Ubuntu page and download the latest LTS (Long Term Support) available version.</p> <p>NOTE: download the server version, NOT the desktop version.</p>"},{"location":"00-Local-Server/#create-a-virtual-machine-with-virtualbox","title":"Create a Virtual Machine with VirtualBox","text":"<ul> <li>Create a local Linux server with VirtualBox (video)</li> </ul> <p>Install VirtualBox, when ready:</p> <ul> <li>Click on Machine &gt; New</li> <li>Give a name to your VM and select the Type Linux. Click Next.</li> <li>Adjust hardware: 1024MB memory and 1 CPU (this is the minimum, but you can reserve more if your host machine can provide it). Click Next</li> <li>Virtual hard disk: 2,5GB is minimum, 5GB is a good number. Click Next.</li> <li>Finish but we\u2019re not done yet.</li> <li>The new VM should show up in a list of VMs, select it.</li> <li>Click on Machine &gt; Settings</li> <li>Click on Storage. Right-click on Controllet IDE, click on Optical Drive.</li> <li>Select the Linux ISO you downloaded from the list if available, if not click Add and find it in your directories. Click Choose.</li> <li>Click on Network and change the network adapter to Bridged Adapter.</li> <li>Click OK</li> <li>Click Start or Machine &gt; Start &gt; Normal Start.</li> </ul>"},{"location":"00-Local-Server/#installing-linux","title":"Installing Linux","text":"<p>After a few seconds the welcome screen will load. At the end of each page there\u2019s DONE and BACK buttons. Use arrow keys and the enter key to select options. When you\u2019re ok with your selection, use the arrow key to go down to DONE and enter to go to the next page.</p> <ul> <li>Welcome Screen: Select your language</li> <li>Keyboard Configuration: Select Keyboard type</li> <li>Choose type of install: Select Ubuntu Server (minimized). It comes with most of the packages you need without being bloated. It will install faster too.</li> <li>Network Connections: If you have setup the VM to use a bridged adapter like instructed, you don\u2019t really have to worry a lot. The installer will automatically detect the DHCP settings from your local network router and you just have to select DONE.</li> <li>Configure Proxy: If your system requires any http proxy to connect to the internet enter the proxy address, otherwise just select DONE.</li> <li>Configure Ubuntu archive mirror: Leave it as default. DONE.</li> <li>Guided Storage Configurations: We are going to utilize the entire storage space reserved for this VM and that\u2019s why we select Use the Entire Disk option.</li> <li>Storage Configuration: Leave it the standard storage configuration and select DONE. When prompted to confirm, don\u2019t worry. This will only use the VM disk, not your computer disk.</li> <li>Profile Setup: Enter your name, your server\u2019s name, your username and password. This user will be your <code>administrator</code> user in the system (or <code>sudo</code>), so don\u2019t forget this password.</li> <li>Update to Ubuntu Pro: No. Skip for now.</li> <li>SSH setup: Select on Install OpenSSH server because that\u2019s how you will connect to your server later.</li> <li>Featured Server Snaps: None of these packages are important now, just select DONE. </li> <li>Installing System: Now you have to wait for a few minutes for your system to install. You can \u201ccheat\u201d and speed up the install by skipping the downloading of updates, select Cancel update and Reboot when it appears at the bottom of the page, a few moments later. You can complete the updates after the first boot. After the installation is complete the system will reboot automatically.</li> </ul>"},{"location":"00-Local-Server/#logging-in-for-the-first-time","title":"Logging in for the first time","text":"<p>After the first reboot, it will show a black screen asking for the <code>login</code>. That\u2019s when you use that username and password you created during the install. </p> <p>Note: the password will not show up, not even <code>***</code>, just trust that is taking it in.</p> <p>If you need to find out the IP address for the VM, just type in the console:</p> <p><code>ip address</code></p> <p>That will give you the <code>inet</code>, i.e., the ip address. You will need that to connect with SSH.</p>"},{"location":"00-Local-Server/#remote-access-via-ssh","title":"Remote access via SSH","text":"<p>If you are using Windows 10 or 11, follow the instructions to connect using the native SSH client. In older versions of Windows, you may need to install a 3<sup>rd</sup> party SSH client, like PuTTY and generate a ssh key-pair.</p> <p>If you are on Linux or MacOS, open a terminal and run the command:</p> <p><code>ssh username@ip_address</code></p> <p>Or, using the SSH private key, <code>ssh -i private_key username@ip_address</code></p> <p>Enter your password (or a passphrase, if your SSH key is protected with one)</p> <p>Voila! You have just accessed your server remotely.</p> <p>If in doubt, consult the complementary video that covers a lot of possible setups (local server with VirtualBox, AWS, Digital Ocean, Azure, Linode, Google Cloud, Vultr and Oracle Cloud).</p>"},{"location":"00-Local-Server/#you-are-now-a-sysadmin","title":"You are now a sysadmin","text":"<p>Confirm that you can do administrative tasks by typing:</p> <p><code>sudo apt update</code></p> <p>Then:</p> <p><code>sudo apt upgrade -y</code></p> <p>Don\u2019t worry too much about the output and messages from these commands, but it should be clear whether they succeeded or not. (Reply to any prompts by taking the default option). These commands are how you force the installation of updates on an Ubuntu Linux system, and only an administrator can do them.</p> <p>REBOOT</p> <p>When a kernel update is identified in this first check for updates, this is one of the few occasions you will need to reboot your server, so go for it after the update is done:</p> <p><code>sudo reboot now</code></p> <p>Your server is now all set up and ready for the course!</p> <p>Note that:</p> <ul> <li>This server is now running but is not exposed to the Internet, i.e. other people will not be able to attempt to connect. We recommend you keep it that way. It is one thing to expose a server in the cloud, exposing your home network is another story. For your own security, don\u2019t do it.</li> </ul> <p>To logout, type <code>logout</code> or <code>exit</code>.</p>"},{"location":"00-Local-Server/#when-you-are-done","title":"When you are done","text":"<p>Just type:</p> <p><code>sudo shutdown now</code></p> <p>Or click on Force Shutdown</p>"},{"location":"00-Local-Server/#some-other-options","title":"Some Other Options","text":"<ul> <li>Install Linux on Windows with WSL</li> <li>Turn an old PC into a Linux server</li> <li>Install Ubuntu server on a Raspberry Pi</li> <li>Run Linux in a Docker container</li> </ul> <p>Now you are ready to start the challenge. Day 1, here we go!</p>"},{"location":"00-VPS-big/","title":"Day 0 - Creating Your Own Server in the Cloud","text":"<p>Refer to Day 0 - Get Your Own Server to review your options:</p> <ul> <li>In a Local Server</li> <li>In the Cloud (with providers like DigitalOcean, Linode and Vultr)</li> <li>In the Cloud (with providers like AWS, Azure and Google Cloud)</li> </ul>"},{"location":"00-VPS-big/#signing-up-with-a-vps","title":"Signing up with a VPS","text":"<p>Sign-up is fairly simple - just provide your email address and a password of your choosing - along with a phone number for a 2FA or another second method of authentication. You will need to also provide your credit card information.</p>"},{"location":"00-VPS-big/#comparison","title":"Comparison","text":"Provider Instance Type vCPU Memory Storage Price* Trial Credits AWS t2.micro 1 1 GB 8 GB SSD $18.27 Free Tier for 1 year Azure B1 1 1 GB 30 GB SSD $12.26 $200 / 30 days + Free Tier for 1 year GCP e2-micro 1 1 GB 10 GB SSD $ 7.11 $300 / 90 days Oracle VM.Standard.E2.1.Micro 1 1 GB 45 GB SSD $19.92 $300 / 30 days + Always Free services <ul> <li>Estimate prices</li> </ul> <p>On a side note, avoid IBM Cloud as much as you can. They do not offer good deals and, according to some reports from previous students, their Linux VM is tampered with enough to the point some commands do not work as expected.</p>"},{"location":"00-VPS-big/#educational-packs","title":"Educational Packs","text":"<ul> <li>AWS Educate at https://aws.amazon.com/education/awseducate/</li> <li>Azure for Students at https://azure.microsoft.com/en-gb/free/students/</li> <li>Google Cloud for Students at https://cloud.google.com/edu/students</li> <li>Oracle Academy Cloud Program at https://academy.oracle.com/en/solutions-cloud-program.html</li> </ul>"},{"location":"00-VPS-big/#create-a-virtual-machine","title":"Create a Virtual Machine","text":"<p>The process is basically the same for all these VPS, but here are some step-by-steps:</p> <ul> <li>VM with AWS</li> <li>VM with Azure</li> <li>VM with GCP</li> </ul>"},{"location":"00-VPS-big/#vm-with-oracle-cloud","title":"VM with Oracle Cloud","text":"<ul> <li>Choose \u201cCompute, Instances\u201d from the left-hand sidebar menu.</li> <li>Click on Create Instance</li> <li>Choose a hostname because the default ones are pretty ugly.</li> <li>Placement: it will automatically choose the one closest to you.</li> <li>Change Image: Select the image \u201cUbuntu\u201d and opt for the latest LTS version</li> <li>Change Shape: Click on \u201cSpecialty and previous generation\u201d. Click VM.Standard.E2.1.Micro - the option with 1GB Mem / 1 CPU / Always Free-eligible</li> <li>Add SSH Keys: select \u201cGenerate a key pair for me\u201d and download the private key to connect with SSH. You can also add a new public key that you created locally</li> <li>Create</li> </ul>"},{"location":"00-VPS-big/#logging-in-for-the-first-time","title":"Logging in for the first time","text":"<p>Select your instance and click \u201cSSH\u201d, it will open a new window console. To access the root, type \u201csudo -i passwd\u201d in the command line then set your own password. Log in by typing \u201csu\u201d and \u201cpassword\u201d. Note that the password won\u2019t show as you type or paste it.</p>"},{"location":"00-VPS-big/#remote-access-via-ssh","title":"Remote access via SSH","text":"<p>You should see a \u201cPublic IPv4 address\u201d (or similar) entry for your server in the account\u2019s control panel, this is its unique Internet IP address, and it is how you\u2019ll connect to it via SSH (the Secure Shell protocol) - something we\u2019ll be covering in the first lesson.</p> <p>If you are using Windows 10 or 11, follow the instructions to connect using the native SSH client. In older versions of Windows, you may need to install a 3<sup>rd</sup> party SSH client, like PuTTY, and generate an ssh key pair.</p> <p>If you are on Linux or MacOS, open a terminal and run the command:</p> <p><code>ssh username@ip_address</code></p> <p>Or, using the SSH private key, <code>ssh -i private_key username@ip_address</code></p> <p>Enter your password (or a passphrase, if your SSH key is protected with one)</p> <p>Voila! You have just accessed your server remotely.</p> <p>If in doubt, consult the complementary video that covers a lot of possible setups (local server with VirtualBox, AWS, Digital Ocean, Azure, Linode, Google Cloud, Vultr, and Oracle Cloud).</p>"},{"location":"00-VPS-big/#what-about-the-root-user","title":"What about the root user?","text":"<p>Working on a different approach from smaller VPS, the big guys don\u2019t let use root to connect. Don\u2019t worry, root still exists in the system, but since the provider already created an admin user from the beginning, you don\u2019t have to deal with it.</p>"},{"location":"00-VPS-big/#you-are-now-a-sysadmin","title":"You are now a sysadmin","text":"<p>Confirm that you can do administrative tasks by typing:</p> <p><code>sudo apt update</code></p> <p>(Normally you\u2019d expect this would prompt you to confirm your password, but because you\u2019re using public key authentication the system hasn\u2019t prompted you to set up a password - and AWS has configured sudo* to not request one for \u201cubuntu\u201d).</p> <p>Then:</p> <p><code>sudo apt upgrade -y</code></p> <p>Don\u2019t worry too much about the output and messages from these commands, but it should be clear whether they succeeded or not. (Reply to any prompts by taking the default option). These commands are how you force the installation of updates on an Ubuntu Linux system, and only an administrator can do them.</p> <p>REBOOT</p> <p>When a kernel update is identified in this first check for updates, this is one of the few occasions you will need to reboot your server, so go for it:</p> <p><code>sudo reboot now</code></p> <p>Your server is now all setup and ready for the course!</p> <p>Note that:</p> <ul> <li>This server is now running and completely exposed to the whole Internet</li> <li>You alone are responsible for managing it</li> <li>You have just installed the latest updates, so it should be secure for now</li> </ul> <p>To logout, type <code>logout</code> or <code>exit</code>.</p>"},{"location":"00-VPS-big/#when-you-are-done","title":"When you are done","text":"<p>You should be safe running the VM during the month for the challenge, but you can Stop the instance at any point. It will continue to count toward the bill, though.</p> <p>When you no longer need the VM, Terminate/Destroy instance.</p> <p>Now you are ready to start the challenge. Day 1, here we go!</p>"},{"location":"00-VPS-small/","title":"Day 0 - Creating Your Own Server in the Cloud (but cheaper)","text":"<p>Refer to Day 0 - Get Your Own Server to review your options:</p> <ul> <li>In a Local Server</li> <li>In the Cloud (with providers like DigitalOcean, Linode and Vultr)</li> <li>In the Cloud (with providers like AWS, Azure and Google Cloud)</li> </ul>"},{"location":"00-VPS-small/#signing-up-with-a-vps","title":"Signing up with a VPS","text":"<p>Sign-up is immediate - just provide your email address and a password of your choosing and you\u2019re in! To be able to create a VM, however, you may need to provide your credit card information (or other information for billing) in the account section.</p>"},{"location":"00-VPS-small/#comparison","title":"Comparison","text":"Provider Instance Type vCPU Memory Storage Price Trial Credits Digital Ocean Basic Plan 1 1 GB 25 GB SSD $6.00 $200 / 60 days Linode Nanode 1GB 1 1 GB 25 GB SSD $5.00 $100 / 60 days Vultr Cloud Compute - Regular 1 1 GB 25 GB SSD $5.00 $250 / 30 days <p>For more details:</p> <ul> <li>Get started with Digital Ocean</li> <li>Get started with Linode</li> <li>Get started with Vultr</li> </ul>"},{"location":"00-VPS-small/#create-a-virtual-machine","title":"Create a Virtual Machine","text":"<p>The process is basically the same for all these VPS, but here some step-by-steps:</p>"},{"location":"00-VPS-small/#vm-with-digital-ocean-or-droplet","title":"VM with Digital Ocean (or Droplet)","text":"<ul> <li>Choose \u201cManage, Droplets\u201d from the left-hand sidebar. (a \u201cdroplet\u201d is Digital Ocean\u2019s cute name for a server!)</li> <li>Click on Create &gt; Droplet</li> <li>Choose Region: choose the one closes to you. Be aware that the pricing can change depending on the region.</li> <li>DataCenter: use the default (it will pick one for you)</li> <li>Choose an image: Select the image \u201cUbuntu\u201d and opt for the latest LTS version</li> <li>Choose Size: Basic Plan (shared CPU) + Regular. Click the option with 1GB Mem / 1 CPU / 25GB SSD Disk</li> <li>Choose Authentication Method: choose \u201cPassword\u201d and type a strong password for the root account.</li> <li>Note that since the server is on the Internet it will be under immediate attack from bots attempting to \u201cbrute force\u201d the root password. Make it strong!</li> <li>Or, if you want to be safer, choose \u201cSSH Key\u201d and add a new public key that you created locally</li> <li>Choose a hostname because the default ones are pretty ugly.</li> <li>Create Droplet</li> </ul>"},{"location":"00-VPS-small/#vm-with-linode-or-node","title":"VM with Linode (or Node)","text":"<ul> <li>Click on Create Linode (a \u201clinode\u201d is Linode\u2019s cute name for a server)</li> <li>Choose an Distribution: Select the image \u201cUbuntu\u201d and opt for the latest LTS version</li> <li>Choose Region: choose the one closest to you. Be aware that the pricing can change depending on the region.</li> <li>Linode Plan: Shared CPU + Nanode 1GB. This option has 1GB Mem / 1 CPU / 25GB SSD Disk</li> <li>Linode Label: Choose a hostname because the default ones are pretty ugly.</li> <li>Choose Authentication Method: on the \u201cRoot Password\u201d and type a strong password for the root account.</li> <li>Note that since the server is on the Internet it will be under immediate attack from bots attempting to \u201cbrute force\u201d the root password. Make it strong!</li> <li>And, if you want to be safer, click \u201cAdd An SSH Key\u201d and add a new public key that you created locally</li> <li>Create Linode</li> </ul>"},{"location":"00-VPS-small/#vm-with-vultr","title":"VM with Vultr","text":"<ul> <li>Choose \u201cProducts, Instances\u201d from the left-hand sidebar. (no cute names)</li> <li>Click on Deploy Server</li> <li>Choose Server: Cloud Compute (Shared vCPU) + Intel Regular Performance</li> <li>Server Location: choose the one closest to you. Be aware that the pricing can change depending on the region.</li> <li>Server image: Select the image \u201cUbuntu\u201d and opt for the latest LTS version</li> <li>Server Size: Click the option with 1GB Mem / 1 CPU / 25GB SSD Disk</li> <li>SSH Keys: click \u201cAdd New\u201d and add a new public key that you created locally</li> <li>Note that since that there\u2019s no option to just authenticate with root password, you will need to create a SSH key.</li> <li>Server Hostname &amp; Label: Choose a hostname for your server.</li> <li>Disable \u201cAuto Backups\u201d. They will not be required for the challenge and are only adding to the bill.</li> <li>Deploy Now</li> </ul>"},{"location":"00-VPS-small/#logging-in-for-the-first-time-with-console","title":"Logging in for the first time with console","text":"<p>We are going to access our server using SSH but, if for some reason you get stuck in that part, there is a way to access it using a console:</p> <ul> <li>Digital Ocean: Droplet Console</li> <li>Linode: LISH Console</li> <li>Vultr: Web Console</li> </ul>"},{"location":"00-VPS-small/#remote-access-via-ssh","title":"Remote access via SSH","text":"<p>You should see a \u201cPublic IPv4 address\u201d (or similar) entry for your server in account\u2019s control panel, this is its unique Internet IP address, and it is how you\u2019ll connect to it via SSH (the Secure Shell protocol) - something we\u2019ll be covering in the first lesson.</p> <ul> <li>Digital Ocean: Click on Networking tab &gt; Public Network &gt; Public IPv4 Address</li> <li>Linode: Click on Network tab &gt; IP Addresses &gt; IPv4 - Public</li> <li>Vultr: Click on Settings tab &gt; Public Network &gt; Address</li> </ul> <p>If you are using Windows 10 or 11, follow the instructions to connect using the native SSH client. In older versions of Windows, you may need to install a 3<sup>rd</sup> party SSH client, like PuTTY and generate a ssh key-pair.</p> <p>If you are on Linux or MacOS, open a terminal and run the command:</p> <p><code>ssh username@ip_address</code></p> <p>Or, using the SSH private key, <code>ssh -i private_key username@ip_address</code></p> <p>Enter your password (or a passphrase, if your SSH key is protected with one)</p> <p>Voila! You have just accessed your server remotely.</p> <p>If in doubt, consult the complementary video that covers a lot of possible setups (local server with VirtualBox, AWS, Digital Ocean, Azure, Linode, Google Cloud, Vultr and Oracle Cloud).</p>"},{"location":"00-VPS-small/#creating-a-working-admin-account","title":"Creating a working admin account","text":"<p>We want to follow the Best Practice of not logging as \u201croot\u201d remotely, so we\u2019ll create an ordinary user account, but one with the power to \u201cbecome root\u201d as necessary, like this:</p> <p><code>adduser snori74</code></p> <p><code>usermod -a -G admin snori74</code></p> <p><code>usermod -a -G sudo snori74</code></p> <p>(Of course, replace \u2018snori74\u2019 with your name!)</p> <p>This will be the account that you use to login and work with your server. It has been added to the \u2018adm\u2019 and \u2018sudo\u2019 groups, which on an Ubuntu system gives it access to read various logs and to \u201cbecome root\u201d as required via the sudo command.</p> <p>To login using your new user, copy the SSH key from root.</p>"},{"location":"00-VPS-small/#you-are-now-a-sysadmin","title":"You are now a sysadmin","text":"<p>Confirm that you can do administrative tasks by typing:</p> <p><code>sudo apt update</code></p> <p>Then:</p> <p><code>sudo apt upgrade -y</code></p> <p>Don\u2019t worry too much about the output and messages from these commands, but it should be clear whether they succeeded or not. (Reply to any prompts by taking the default option). These commands are how you force the installation of updates on an Ubuntu Linux system, and only an administrator can do them.</p> <p>REBOOT</p> <p>When a kernel update is identified in this first check for updates, this is one of the few occasions you will need to reboot your server, so go for it after the update is done:</p> <p><code>sudo reboot now</code></p> <p>Your server is now all set up and ready for the course!</p> <p>Note that:</p> <ul> <li>This server is now running, and completely exposed to the whole of the Internet</li> <li>You alone are responsible for managing it</li> <li>You have just installed the latest updates, so it should be secure for now</li> </ul> <p>To logout, type <code>logout</code> or <code>exit</code>.</p>"},{"location":"00-VPS-small/#when-you-are-done","title":"When you are done","text":"<p>You should be safe running the VM during the month for the challenge, but you can Stop the instance at any point. It will continue to count to the bill, though.</p> <p>When you no longer need the VM, Terminate/Destroy instance.</p> <p>Now you are ready to start the challenge. Day 1, here we go!</p>"},{"location":"00/","title":"Day 0 - Get Your Own Server","text":"<ul> <li>Complementary video</li> </ul>"},{"location":"00/#intro","title":"INTRO","text":"<p>First, you need a server. You can\u2019t learn about administering a remote Linux server without having one of your own - so today we\u2019re going to get one - completely free!</p> <p>Through the magic of Linux and virtualization, it\u2019s now possible to get a small Internet server setup almost instantly - and at a very low cost. Technically, what you\u2019ll be doing is creating and renting a VPS  (\u201cVirtual Private Server\u201d). In a data center somewhere, a single physical server running Linux will be split into a dozen or more Virtual servers, using the KVM (Kernel-based Virtual Machine) feature that\u2019s been part of Linux since early 2007.</p> <p>In addition to a hosting provider, we also need to choose which \u201cflavor\u201d of Linux to install on our server. If you\u2019re new to Linux then the range of \u201cdistributions\u201d available can be confusing - but the latest LTS (\u201cLong Term Support\u201d) version of Ubuntu Server is a popular choice, and what you\u2019ll need for this course.</p>"},{"location":"00/#do-you-have-a-free-server-i-can-use","title":"Do you have a free server I can use?","text":"<p>Well, not quite yet.</p> <p>SadServers has a beta scenario - \u201cResumable Server\u201d: Linux Upskill Challenge</p> <p>This is a Debian 11 server without a challenge; it\u2019s for you to do as you please. Please be mindful that it still has some limitations (there\u2019s still no outgoing Internet access) and there can be some issues.</p>"},{"location":"00/#so-what-are-the-options","title":"So, what are the options?","text":"<ul> <li>In a Local Server</li> <li>In the Cloud (with providers like DigitalOcean, Linode and Vultr)</li> <li>In the Cloud (with providers like AWS, Azure and Google Cloud)</li> </ul> <p>Check your options, see what fits you best. Take a minute to watch the video, it will answer most of your questions. When you have your server ready, you can start the challenge.</p> <p>Day 1, here we go!</p>"},{"location":"01/","title":"Day 1 - Get to know your server","text":"<ul> <li>Lesson video</li> </ul>"},{"location":"01/#intro","title":"INTRO","text":"<p>You should now have a remote server setup running the latest Ubuntu Server LTS (Long Term Support) version. You alone will be administering it. To become a fully-rounded Linux server admin you should become comfortable working with different versions of Linux, but for now Ubuntu is a good choice.</p> <p>Once you have reached a level of comfort at the command-line then you\u2019ll find your skills transfer not only to all the standard Linux variants, but also to Android, Apple\u2019s OSX, OpenBSD, Solaris and IBM AIX. Throughout the course you\u2019ll be working on Linux - but in fact most of what is covered is applicable to any system derived from the UNIX Operating System - and the major differences between them are with their graphic user interfaces such as Gnome, Unity, KDE etc - none of which you\u2019ll be using!</p>"},{"location":"01/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Connect and login to your server, preferably using a SSH client</li> <li>Run a few simple commands to check the status of your server - like this demo</li> </ul>"},{"location":"01/#using-a-ssh-client","title":"USING A SSH CLIENT","text":"<p>Remote access used to be done by the simple telnet protocol, but now the much more secure SSH (Secure SHell) protocol is always used. If your server is a local VM or WSL, you could skip this section by simply using the server console/terminal if you want. We will explore SSH more in detail at the server side on Day 3 but knowing how to use a ssh client is a basic sysadmin skill, so you might as well do it now.</p>"},{"location":"01/#in-macos-and-linux","title":"In MacOS and Linux","text":"<p>On an MacOS machine you\u2019ll normally access the command line via Terminal.app - it\u2019s in the Utilities sub-folder of Applications.</p> <p>On Linux distributions with a menu you\u2019ll typically find the terminal under \u201cApplications menu -&gt; Accessories -&gt; Terminal\u201d, \u201cApplications menu -&gt; System -&gt; Terminal\u201d or \u201cMenu -&gt; System -&gt; Terminal Program (Konsole)\u201d- or you can simply search for your terminal application. In many cases <code>Ctrl+Alt+T</code> will also bring up a terminal windows.</p> <p>Once you open up a \u201cterminal\u201d session, you can use your command-line ssh client like this:</p> <p><code>ssh user@&lt;ip address&gt;</code></p> <p>For example:</p> <p><code>ssh support@192.123.321.99</code></p> <p>If the remote server was configured with a SSH public key (like AWS, Azure and GCP), then you\u2019ll need to point to the location of the private key as proof of identity with the <code>-i</code> switch, typically like this:</p> <p><code>ssh -i ~/.ssh/id_rsa support@192.123.321.99</code></p> <p>A very slick connection process can be setup with the <code>.ssh/config</code> feature - see the \u201cSSH client configuration\u201d link in the EXTENSION section below.</p>"},{"location":"01/#in-windows","title":"In Windows","text":"<p>On recent Windows 10 versions, the same command-line client is now available, but must be enabled (via \u201cSettings\u201d, \u201cApps\u201d, \u201cApps &amp; features\u201d, \u201cManage optional features\u201d, \u201cAdd a feature\u201d, \u201cOpenSSH client\u201d).</p> <p>There are various SSH clients available for Windows (PuTTY, Solar-PuTTY, MobaXterm, Termius, etc) but if you use Windows versions older than 10, the installation of PuTTY is suggested.</p> <p>Alternatively, you can install the Windows Subsystem for Linux which gives you a full local command-line Linux environment, including an SSH client - ssh.</p> <p>Regardless of which client you use, the first time you connect to your server, you may receive a warning that you\u2019re connecting to a new server - and be asked if you wish to cache the host key. Yes, you do. Just type/click Yes.</p> <p>But don\u2019t worry too much about securing the SSH session or hardening the server right now; we will be doing this in Day 3.</p> <p>For now, just login to your server and remember that Linux is case-sensitive regarding user names, as well as passwords.</p> <p>You\u2019ll be spending a lot of time in your SSH client, so it pays to spend some time customizing it. At the very least try \u201cblack on white\u201d and \u201cgreen on black\u201d - and experiment with different monospaced fonts, (\u201cUbuntu Mono\u201d is free to download, and very nice).</p> <p>It\u2019s also very handy to be able to cut and paste text between your remote session and your local desktop, so spend some time getting confident with how to do this in your SSH client and terminal.</p> <p>Perhaps you might now try logging in from home and work - even from your smartphone! - using an ssh client app such as Termux, Termius for Android or Termius for iPhone. As a server admin you\u2019ll need to be comfortable logging in from all over. You can also potentially use JavaScript ssh clients like consolefish and ShellHub, but these options involve putting more trust in third-parties than most sysadmins would be comfortable with when accessing production systems.</p> <p>To log out, simply type <code>exit</code> or close the terminal.</p>"},{"location":"01/#login-to-your-server","title":"LOGIN TO YOUR SERVER","text":"<p>Once logged in, notice that the \u201ccommand prompt\u201d that you receive ends in <code>$</code> - this is the convention for an ordinary user, whereas the \u201croot\u201d user with full administrative power has a <code>#</code> prompt (but we will dive into this difference in Day 3 as well).</p> <p>Here\u2019s a short vid on using ssh in a work environment.</p>"},{"location":"01/#general-information-about-the-server","title":"GENERAL INFORMATION ABOUT THE SERVER","text":"<p>Use <code>lsb_release -a</code> to see which Linux distro and version you\u2019re using. lsb_release may not be available in your server, as it\u2019s not widely adopted, but you will always have the same information available in the system file os-release. You can check its content by typing <code>cat /etc/os-release</code></p> <p><code>uname -a</code> will also print the system information and it can show some interesting things like kernel version, hardware platform, etc.</p> <p><code>uptime</code> will show you how long the system has been running. It kinda makes the weird numbers you get from <code>cat /proc/uptime</code> a lot more readable.</p> <p><code>whoami</code> will print the user name you logged on with, <code>who</code> will show who is logged on and <code>w</code> will also show what they are doing.</p>"},{"location":"01/#hardware-information","title":"HARDWARE INFORMATION","text":"<p><code>lshw</code> can give some detailed information on the hardware configuration, and there\u2019s a bunch of switches we can use to filter the information we want to see, but it\u2019s not the only tool we use to check hardware with. Some of the used commands are:</p> <ul> <li><code>lscpu</code> to display information about the CPU architecture</li> <li><code>lsblk</code> to list block devices</li> <li><code>lspci</code> to list all PCI devices</li> <li><code>lsusb</code> to list USB devices</li> </ul>"},{"location":"01/#measure-memory-and-cpu-usage","title":"MEASURE MEMORY AND CPU USAGE","text":"<p>Don\u2019t worry! Linux won\u2019t eat your RAM. But if you want to check the amount of memory used in the system, use <code>free -h</code> . <code>vmstat</code> will also give some memory statistics.</p> <p><code>top</code> is like a Task Manager for Linux, it will display the processes and the consumption of resources. <code>htop</code> is an interactive, prettier version.</p>"},{"location":"01/#measure-disk-usage","title":"MEASURE DISK USAGE","text":"<p>Use <code>df -h</code> to see disk space usage, but go with <code>du -h</code> if you want to estimate the size of your folders.</p>"},{"location":"01/#measure-network-usage","title":"MEASURE NETWORK USAGE","text":"<p>You will have a general idea of your network interfaces and their IP addresses by using <code>ifconfig</code> or its modern substitute <code>ip address</code>, but it won\u2019t show you bandwidth usage.</p> <p>For that we have <code>netstat -i</code> in a more static view and <code>ifstat</code> in a continuous view. To interrupt <code>ifstat</code> just use <code>CTRL+C</code>.</p> <p>But if you want more info on that traffic, <code>sudo iftop -i eth0</code> is a nice display. Change <code>eth0</code> for the interface you wish to capture traffic information. To exit the monitor view, type <code>q</code> to quit.</p>"},{"location":"01/#posting-your-progress","title":"POSTING YOUR PROGRESS","text":"<p>Regularly posting your progress can be a helpful motivator. Feel free to post to the subreddit/community or to the discord chat a small introduction of yourself, and your Linux background for your \u201cclassmates\u201d - and notes on how each day has gone.</p> <p>Of course, also drop in a note if you get stuck or spot errors in these notes.</p>"},{"location":"01/#extension","title":"EXTENSION","text":"<p>If this was all too easy, then spend some time reading up on:</p> <ul> <li>What is swap and swap space?</li> <li>How Linux deals with out-of-memory?</li> <li>How Do I Find Out Linux CPU Utilization and Usage?</li> <li>How do I find out Linux Disk utilization and I/O usage?</li> <li>20 Best Linux Bandwidth Monitoring Tools for Network Analysis</li> </ul>"},{"location":"01/#resources","title":"RESOURCES","text":"<ul> <li>Comparing CENTOS and Ubuntu for servers</li> <li>How to Use PuTTY on Windows</li> <li>Puttygen command line on Linux - SSH key generator</li> <li>SSH client configuration</li> <li>A Beginners Guide to SSH</li> <li>Linux command to display your hardware information</li> <li>See if your hardware is Linux-compatible on Hardware for Linux and DistroWatch</li> <li>What is Load Average in Linux?</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"02/","title":"Day 2 - Basic navigation","text":"<ul> <li>Lesson video</li> </ul>"},{"location":"02/#intro","title":"INTRO","text":"<p>Most computer users outside of the Linux and Unix world don\u2019t spend much time at the command-line now, but as a Linux sysadmin this is your default working environment - so you need to be skilled in it.</p> <p>When you use a graphic desktop such as Windows or Apple\u2019s macOS (or even the latest Linux flavors), then increasingly you are presented with simple \u201cplaces\u201d where your stuff is stored - \u201cPictures\u201d \u201cMusic\u201d etc but if you\u2019re even moderately technical then you\u2019ll realize that underneath all this is a hierarchical \u201cdirectory structure\u201d of \u201cfolders\u201d (e.g. C:\\Users\\Steve\\Desktop on Windows or /Users/Steve/Desktop on macOS - and on a Desktop Linux system /home/steve/Desktop)</p> <p>From now on, the course will point you to a range of good online resources for a topic, and then set you a simple set of tasks to achieve. It\u2019s perfectly fine to google for other online resources, refer to any books you have etc - and in fact a fundamental element of the design of this course is to force you to do a bit of your own research. Even the most experienced sysadmins will do an online search to find advice for how to use commands - so the sooner you too get into that habit the better!</p>"},{"location":"02/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Find the documentation for the commands we used so far - demo</li> <li>Navigate between directories, then create, list, move and delete files - demo</li> </ul>"},{"location":"02/#rtfm","title":"RTFM","text":"<p>This is a good time to mention that one of the many advantages of Linux is that it\u2019s designed to let you know the system, to let you learn how to use it. The documentation available in form of text manuals, guides and forums is where you will spend most of your time during this journey.</p> <p>Whereas proprietary systems have some free documentation, you see much more frequently the use of paid customer support to fix issues or find how a particular task can be executed. Although you can also do this with Linux (Canonical, RedHat and SuSE are examples of companies that offer support in the same fashion), this is most likely not the case. And you are here to learn, so\u2026</p> <p>Which leads us to the famous acronym RTFM. Reading the manual is the first thing you should do when you\u2019re learning a command. We will go through the many ways to obtain that information but if at the end of that search you need more insight, you can always ask a well written question in forums and other communities.</p> <p>Starting with the <code>man</code> command. Each application installed comes with its own page in this manual, so that you can look at the page for <code>pwd</code> to see the full detail on the syntax like this:</p> <p><code>man pwd</code></p> <p>You might also try:</p> <pre><code> man cp\n man mv\n man grep\n man ls\n man man\n</code></pre> <p>As you\u2019ll see, these are excellent for the detailed syntax of a command, but many are extremely terse, and for others the amount of detail can be somewhat daunting!</p> <p>And that\u2019s why <code>tldr</code> is such a powerful tool! You can easily install it with <code>sudo apt install tldr</code> or follow this demo.</p> <pre><code>$ tldr pwd\npwd\nPrint name of current/working directory.More information: https://www.gnu.org/software/coreutils/pwd.\n\n - Print the current directory:\n   pwd\n\n - Print the current directory, and resolve all symlinks (i.e. show the \"physical\" path):\n   pwd -P\n</code></pre> <p>If you know a keyword or some description of what the command is supposed to do, you can try <code>apropos</code> or <code>man -k</code> like this:</p> <pre><code>$ apropos \"working directory\"\ngit-stash (1)        - Stash the changes in a dirty working directory away\npwd (1)              - print name of current/working directory\npwdx (1)             - report current working directory of a process\n\n$ man -k \"working directory\"\ngit-stash (1)        - Stash the changes in a dirty working directory away\npwd (1)              - print name of current/working directory\npwdx (1)             - report current working directory of a process\n</code></pre> <p>But you\u2019ll soon find out that not every command has a manual that you can read with <code>man</code>. Those commands are contained within the shell itself and we call them builtin commands. </p> <p>There are some overlaping (i.e. builtin commands that also have a man page) but if <code>man</code> does not work, we use <code>help</code> to display information about them.</p> <pre><code>$ man export\nNo manual entry for export\n\n$ help export\nexport: export [-fn] [name[=value] ...] or export -p\n    Set export attribute for shell variables.\n\n    Marks each NAME for automatic export to the environment of subsequently\n    executed commands.  If VALUE is supplied, assign VALUE before exporting.\n\n    Options:\n      -f        refer to shell functions\n      -n        remove the export property from each NAME\n      -p        display a list of all exported variables and functions\n\n    An argument of `--' disables further option processing.\n\n    Exit Status:\n    Returns success unless an invalid option is given or NAME is invalid.\n</code></pre> <p>The best way to know if a command is a builtin command, is to check its <code>type</code>:</p> <pre><code>$ type export\nexport is a shell builtin\n</code></pre> <p>And lastly, <code>info</code> reads the documentation stored in info format.</p>"},{"location":"02/#navigate-the-file-structure","title":"NAVIGATE THE FILE STRUCTURE","text":"<ul> <li>Start by reading the manual: <code>man hier</code></li> <li><code>/</code> is the \u201croot\u201d of a branching tree of folders (also known as directories)</li> <li>At all times you are \u201cin\u201d one part of the system - the command <code>pwd</code> (\u201cprint working directory\u201d) will show you where you are</li> <li>Generally your prompt is also configured to give you at least some of this information, so if I\u2019m \u201cin\u201d the /etc directory then the prompt might be <code>steve@202.203.203.22:/etc$</code> or simply <code>/etc: $</code></li> <li><code>cd</code> moves to different areas - so <code>cd /var/log</code> will take you into the <code>/var/log</code> folder - do this and then check with <code>pwd</code> - and look to see if your prompt changes to reflect your location.</li> <li>You can move \u201cup\u201d the structure by typing <code>cd ..</code> ( \u201ccee dee dot dot \u201c) try this out by first <code>cd</code>\u2018ing to <code>/var/log/</code> then <code>cd ..</code> and then <code>cd ..</code> again - watching your prompt carefully, or typing pwd each time, to clarify your present working directory.</li> <li>A \u201crelative\u201d location is based on your present working directory - e.g. if you first <code>cd /var</code> then pwd will confirm that you are \u201cin\u201d <code>/var</code>, and you can move to <code>/var/log</code> in two ways - either by providing the full path with <code>cd /var/log</code> or simply the \u201crelative\u201d path with the command <code>cd log</code></li> <li>A simple <code>cd</code> will always return you to your own defined \u201chome directory\u201d, also referred to as <code>~</code> (the \u201ctilde\u201d character) [NB: this differs from DOS/Windows]</li> <li>What files are in a folder? The <code>ls</code> (list) command will give you a list of the files, and sub folders. Like many Linux commands, there are options (known as \u201cswitches\u201d) to alter the meaning of the command or the output format. Try a simple  <code>ls</code>, then  <code>ls -l -t</code>  and then try  <code>ls -l -t -r -a</code></li> <li>By convention, files with a starting character of \u201c.\u201d are considered hidden and the <code>ls</code>, and many other commands, will ignore them. The <code>-a</code> switch includes them. You should see a number of hidden files in your home directory.</li> <li>A note on switches: Generally most Linux command will accept one or more \u201cparameters\u201d, and one or more \u201cswitches\u201d. So, when we say <code>ls -l  /var/log</code> the \u201c<code>-l</code>\u201d is a switch to say \u201clong format\u201d and the \u201c<code>/var/log</code>\u201d is the \u201cparameter\u201d. Many commands accept a large number of switches, and these can generally be combined (so from now on, use <code>ls -ltra</code>, rather than <code>ls -l -t -r -a</code></li> <li>In your home directory type <code>ls -ltra</code> and look at the far left hand column - those entries with a \u201cd\u201d as the first character on the line are directories (folders) rather than files. They may also be shown in a different color or font - if not, then adding the \u201c\u2013color=auto\u201d switch should do this (i.e.  <code>ls -ltra --color=auto</code>)</li> </ul>"},{"location":"02/#basic-directory-manipulation","title":"BASIC DIRECTORY MANIPULATION","text":"<ul> <li>You can make a new folder/directory with the <code>mkdir</code> command, so move to your home directory, type <code>pwd</code> to check that you are indeed in the correct place, and then create a directory, for example to create one called \u201ctest\u201d, simply type <code>mkdir test</code>. Now use the <code>ls</code> command to see the result.</li> <li>You can create even more directories, nesting inside directories, and then navigate between them with the <code>cd</code> command.</li> <li>When you want to move that directory inside another directory, you use <code>mv</code> and specify the path to move.</li> <li>To delete (or remove) a directory, use <code>rmdir</code> if the directory is empty or <code>rm -r</code> if there still any files or other directories inside of it.</li> </ul>"},{"location":"02/#basic-file-manipulation","title":"BASIC FILE MANIPULATION","text":"<ul> <li>You can make new empty files with the <code>touch</code> command, so you can explore a little more of the <code>ls</code> command.</li> <li>When you want to move that file to another directory, you use <code>mv</code> and specify the path to move.</li> <li>To delete (or remove) a file, use <code>rm</code>.</li> </ul>"},{"location":"02/#wrap","title":"WRAP","text":"<p>Being able to move confidently around the directory structure at the command line is important, so don\u2019t think you can skip it! However, these skills are something that you\u2019ll be constantly using over the twenty days of the course, so don\u2019t despair if this doesn\u2019t immediately \u201cclick\u201d.</p>"},{"location":"02/#extension","title":"EXTENSION","text":"<p>If this is already something that you\u2019re very familiar with, then:</p> <ul> <li>Learn about <code>pushd</code> and <code>popd</code> to navigate around multiple directories easily. Running <code>pushd /var/log</code> moves you to to the <code>/var/log</code>, but keeps track of where you were. You can <code>pushd</code> more than one directory at a time. Try it out: <code>pushd /var/log</code>, <code>pushd /dev</code>, <code>pushd /etc</code>, <code>pushd</code>, <code>popd</code>, <code>popd</code>. Note how <code>pushd</code> with no arguments switches between the last two pushed directories but more complex navigation is also possible. Finally, <code>cd -</code> also moves you the last visited directory.</li> </ul>"},{"location":"02/#resources","title":"RESOURCES","text":"<ul> <li>Difference between help, info and man command</li> <li>GNU Texinfo</li> <li>Explore the Linux file system</li> <li>Linux File System</li> <li>Simple Terminal Commands on Ubuntu</li> <li>Solaris Unix Commands</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"03/","title":"Day 3 - Power trip!","text":"<ul> <li>Lesson video</li> </ul>"},{"location":"03/#intro","title":"INTRO","text":"<p>You may have been logging in as an ordinary user at your server, yet you\u2019re probably aware that root is the power user on a Linux system. This administrative or \u201csuperuser\u201d account, is all powerful - and a typo in a command could potentially cripple your server. As a sysadmin you\u2019re typically working on systems that are both important and remote, so avoiding such mistakes is A Very Good Idea.</p> <p>In ancient times, sysadmins used to login as <code>root</code> in production systems, but it\u2019s now common Best Practice to discourage or disallow login directly by <code>root</code> and instead to give specified trusted users the permission to run root-only commands via the <code>sudo</code> command.</p>"},{"location":"03/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Change the password of your <code>sudo</code> user</li> <li>Change the hostname</li> <li>Change the timezone</li> </ul> <p>Check out the demo</p>"},{"location":"03/#local-changes-vs-global-changes","title":"LOCAL CHANGES VS GLOBAL CHANGES","text":"<p>Global: programs/environments that any user can use, used across the system. A global change affects all users.</p> <p>Local or By user: programs/environments that a particular user runs, not available to other users. A local change affects only one user.</p>"},{"location":"03/#who-are-you-and-what-can-you-do","title":"WHO ARE YOU AND WHAT CAN YOU DO?","text":"<p>There are 3 types of users in a Linux system:</p> <ul> <li><code>root</code> - the powerful superuser that can execute any command at any level in the system. They can do all global changes as well as local changes for any user.</li> <li><code>sudoers</code> - regular users that are allowed to use <code>sudo</code>, i.e., they can execute commands in one or more levels in the system, can do some or all global changes. It\u2019s common to have at least one sudoer that has the same powers as root, but the amount of priviledges other sudoers have can vary.</li> <li><code>regular users</code> - users that can use the system but can only do local changes, i.e., can only deal with their own files/directories and environment variables.</li> </ul> <p>We will get into more detail about users and their permissions on Day 13 and Day 14.</p>"},{"location":"03/#stop-using-root","title":"STOP USING ROOT","text":"<p>If you created a VM with one of the big VPS providers, <code>root</code> is already \u201cdisabled\u201d and your default user (ubuntu, azureuser, etc) already has <code>sudo</code> powers.</p> <p>However, if you really, really want to use <code>root</code>, there are ways to do it in AWS, Azure and GCP. But do it at your own risk!</p> <p>However, if you created a VM locally or with other VPS providers, it is very likely that you have your <code>root</code> user readily available.</p> <p>Stop using root. If you followed the guides, you should have created a regular user and added it to a sudoers group, like this:</p> <pre><code>adduser snori74\nusermod -a -G sudo snori74\n</code></pre> <p>Adding a regular user to a group with <code>sudo</code> priviledges is the easiest way to do it, as the <code>sudo</code> group is pretty standard in Ubuntu. But this can also be accomplished by modifying the <code>/etc/sudoers</code> using the command <code>visudo</code>.</p> <p>Login with this new user from now on. Use <code>whoami</code> to print the user name you logged on with.</p>"},{"location":"03/#change-password","title":"CHANGE PASSWORD","text":"<p>If you\u2019re using a password to login (rather than public key), then now is a good time to ensure that this is very strong and unique - i.e. at least 10 alphanumeric characters - because your server is fully exposed to bots that will be continuously attempting to break in. This is specially important if you\u2019re still using <code>root</code>.</p> <p>Use the <code>passwd</code> command to change your password. </p> <p>To do this, think of a new, secure password, then simply type <code>passwd</code>, press \u201cEnter\u201d and give your current password when prompted, then the new one you\u2019ve chosen, confirm it  - and then WRITE IT DOWN somewhere. In a production system of course, public keys and/or two factor authentication would be more appropriate.</p>"},{"location":"03/#a-note-on-hardening","title":"A NOTE ON \u201cHARDENING\u201d","text":"<p>Your server is protected by the fact that its security updates are up to date, and that you\u2019ve set Long Strong Unique passwords - or are using public keys. While exposed to the world, and very likely under continuous attack, it should be perfectly secure.</p> <p>Next week we\u2019ll look at how we can view those attacks, but for now it\u2019s simply important to state that while it\u2019s OK to read up on \u201cSSH hardening\u201d, things such as changing the default port and <code>fail2ban</code> are unnecessary and unhelpful when we\u2019re trying to learn - and you are perfectly safe without them.</p>"},{"location":"03/#the-power-of-sudo","title":"THE POWER OF SUDO","text":"<ul> <li>Use the links in the \u201cResources\u201d section below to understand how <code>sudo</code> works</li> <li>Try <code>cat /etc/shadow</code>, can you view the contents of the file?</li> <li>This file is where the hashed passwords are kept. It is a prime target for intruders - who aim to grab it and use offline password crackers to discover the passwords. So it\u2019s safe to assume it shouldn\u2019t be visible to non-authorized users in the system.</li> <li>Now try with <code>sudo</code>, i.e. <code>sudo cat /etc/shadow</code></li> <li>Test running the <code>reboot</code> command, and then via <code>sudo</code> (i.e. <code>sudo reboot</code>)</li> </ul> <p>Once you\u2019ve reconnected back:</p> <ul> <li>Use the <code>uptime</code> command to confirm that your server did actually fully restart</li> <li>See the login history by filtering the username (e.g. <code>snori74</code>) using the command <code>last</code>. If this is the first time using a non-root user, you will only have one record (i.e. <code>last snori74</code>).</li> <li>Now compare to the times you logged as root: <code>last root</code></li> <li>Better yet, check for failed login attempts for root with <code>sudo lastb</code></li> <li>Test fully \u201cbecoming root\u201d by the command <code>sudo -i</code>. This can be handy if you have a series of commands to do \u201cas root\u201d. Note the change to your prompt.</li> <li>Type <code>exit</code> or <code>logout</code> to get back to your own normal \u201cadmin\u201d login.</li> <li>Check the last few times <code>sudo</code> was used by typing: <code>sudo journalctl -e /usr/bin/sudo</code></li> </ul> <p>Normally invoking the <code>sudo</code> command will ask you to re-confirm your identity with your password. However, this can be changed in the sudoers configuration file so it does NOT prompt for a password. We talk about it in more detail in Day 13.</p>"},{"location":"03/#administrative-tasks","title":"ADMINISTRATIVE TASKS","text":"<p>We will go into detail of the many things you can do to your server, but here are some examples of simple administrative tasks that require <code>sudo</code>.</p> <p>If you wish to, you can now rename your server. Traditionally you would do this by editing two files, <code>/etc/hostname</code> and <code>/etc/hosts</code> and then rebooting - but the more modern, and recommended, way is to use the <code>hostnamectl</code> command, like this:</p> <pre><code>sudo hostnamectl set-hostname mylittlecloudbox\n</code></pre> <p>No reboot is required but if you want to see the new name in the prompt, just open a new session with <code>bash</code> (or logoff and login again, same effect).</p> <p>For a cloud server, you might find that the hostname changes after a reboot. To prevent this, edit <code>/etc/cloud/cloud.cfg</code> and change the \u201cpreserve_hostname\u201d line to read:</p> <pre><code>preserve_hostname: true\n</code></pre> <p>You might also consider changing the timezone your server uses. By default this is likely to be UTC (i.e. GMT) - which is pretty appropriate for a worldwide fleet of servers. You could also set it to the zone the server is in, or where you and your headquarters are. For a company this is a decision not to be taken lightly, but for now you can simply change as you please!</p> <p>First check the current setting with:</p> <pre><code>timedatectl\n</code></pre> <p>Then get a a list of available timezones:</p> <pre><code>timedatectl list-timezones\n</code></pre> <p>And finally select one, like this:</p> <pre><code>sudo timedatectl set-timezone Australia/Sydney\n</code></pre> <p>Confirm:</p> <pre><code>timedatectl\n</code></pre> <p>The major practical effects of this are (1) the timing of scheduled tasks, and (2) the timestamping of the logs files kept under <code>/var/log</code>. If you make a change, there will naturally be a \u201cjump\u201d in the dates and time recorded.</p>"},{"location":"03/#with-great-powers-comes-great-responsibility","title":"WITH GREAT POWERS COMES GREAT RESPONSIBILITY","text":"<p>As a Linux sysadmin you may be working on client or custom systems where you have little control, and many of these will default to doing everything as <code>root</code>. You need to be able to safely work on such systems - where your only protection is to double check before pressing <code>Enter</code>.</p> <p>On the other hand, for any systems where you have full control, setting up a \u201cnormal\u201d account for yourself (and any co-admins) with permission to run <code>sudo</code> is recommended. While this is standard with Ubuntu, it\u2019s also easy to configure with other popular server distros such as Debian, CentOS and RHEL.</p> <p>Even with that, it\u2019s important to take the necessary precautions before making global changes, to prevent accidentally locking yourself out or other issues. Practices like using a test environment, checking for syntax errors and typos, and keeping an eye on the log files, will eventually become second nature.</p>"},{"location":"03/#extension","title":"EXTENSION","text":"<ul> <li>How To Edit the Sudoers File</li> <li>Hardening SSH</li> <li>SSH Tunneling</li> <li>How To Set Up Multi-Factor Authentication for SSH on Ubuntu 20.04</li> </ul>"},{"location":"03/#whats-difference-between-sudo-i-and-sudo-s","title":"What\u2019s difference between \u201csudo -i\u201d and \u201csudo -s\u201d?","text":"<p>Both <code>sudo -i</code> and <code>sudo -s</code> are commands that allow a user to obtain root privileges on a Unix-based system. However, they have some differences in how they function.</p> <ul> <li><code>sudo -i</code> stands for \u201csudo interactive\u201d and it launches a new login shell for the root user. This means that it creates a new environment for the root user with the root user\u2019s home directory and shell configuration files. This makes it similar to logging in directly as the root user, and any commands executed from this shell will have the privileges of the root user.</li> <li><code>sudo -s</code> stands for \u201csudo shell\u201d and it launches a new shell for the root user, but it does not create a new login shell. This means that it does not change the environment or shell configuration files of the current user. Any commands executed from this shell will have the privileges of the root user, but the environment will still be that of the current user.</li> </ul> <p>In summary, <code>sudo -i</code> is more powerful and creates a new shell with the full environment of the root user, while <code>sudo -s</code> is less powerful and only launches a new shell with the root user\u2019s privileges but with the same environment as the current user.</p>"},{"location":"03/#resources","title":"RESOURCES","text":"<ul> <li>This cartoon explains it nicely!</li> <li>How to find last logged in users in Linux</li> <li>Sudo in Ubuntu</li> <li>How to use \u201csudo\u201d</li> <li>This is how password cracking is done</li> <li>Password-less SSH login</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"04/","title":"Day 4 - Installing software, exploring the file structure","text":"<ul> <li>Lesson video</li> </ul>"},{"location":"04/#intro","title":"INTRO","text":"<p>As a sysadmin, one of your key tasks is to install new software as required. You\u2019ll also need to be very familiar with the layout of the standard directories in a Linux system.</p> <p>You\u2019ll be getting practice in both of these areas in today\u2019s session.</p>"},{"location":"04/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Install a new application from the online repositories</li> <li>Become familiar with some of the standard directories</li> <li>Look at the format and content of some configuration files.</li> </ul> <p>If you\u2019ve used a smartphone \u201capp store \u201d or \u201cmarket\u201d, then you\u2019ll immediately understand the normal installation of Linux software from the standard repositories. As long as we know what the name or description of a package (=app) is, then we  can search for it:</p> <pre><code> apt search \"midnight commander\"\n</code></pre> <p>This will show a range of matching \u201cpackages\u201d, and we can then install them with <code>apt install</code> command. So to install package <code>mc</code> (Midnight Commander) on Ubuntu:</p> <pre><code> sudo apt install mc\n</code></pre> <p>(Unless you\u2019re already logged in as the <code>root</code> user you need to use <code>sudo</code> before the installation commands - because an ordinary user is not permitted to install software that could impact a whole server).</p> <p>Now that you have <code>mc</code> installed, start it by simply typing <code>mc</code> and pressing Enter.</p> <p>This isn\u2019t a \u201cclassic\u201d Unix application, but once you get over the retro interface you should find navigation fairly easy, so go looking for these directories:</p> <p><code>/root</code> <code>/home</code> <code>/sbin</code> <code>/etc</code> <code>/var/log</code></p> <p>\u2026and use the links in the Resources section below to begin to understand how these are used. You can also read the official manual on this hierarchy by typing <code>man hier</code>.</p> <p>Most key configuration files are kept under <code>/etc</code> and subdirectories of that. These files, and the logs under <code>/var/log</code> are almost invariably simple text files. In the coming days you\u2019ll be spending a lot of time with these - but for now simply use F3 to look into their contents.</p> <p>Some interesting files to look at are: <code>/etc/passwd</code>, <code>/etc/ssh/sshd_config</code> and <code>/var/log/auth.log</code></p> <p>Use F3 again to exit from viewing a file.</p> <p>F10 will exit <code>mc</code>, although you may need to use your mouse to select it.</p> <p>(On an Apple Mac in Terminal, you may need to use ESC+3 to get F3 and ESC+0 for F10)</p> <p>Now use <code>apt search</code> to search for and install some more packages: Try searching for \u201changman\u201d. You will probably find that an old text-based version is included in a package called <code>bsdgames</code>. Install and play a couple of rounds\u2026</p>"},{"location":"04/#posting-your-progress","title":"Posting your progress","text":"<ul> <li>Post your progress, comments and questions to the forum.</li> </ul>"},{"location":"04/#extension","title":"EXTENSION","text":"<ul> <li>Use <code>mc</code> to view <code>/etc/apt/sources.list.d/ubuntu.sources</code> where the actual locations of the repositories are specified. Often these will be \u201cmirror\u201d sites that are closer to your server than the main Ubuntu servers.</li> <li>Read Repositories - CommandLine for more of the gory details.</li> </ul>"},{"location":"04/#resources","title":"RESOURCES","text":"<ul> <li>Difference Between apt and apt-get Explained</li> <li>DNF vs APT: Similarities and Differences Analyzed!</li> <li>Ubuntu Server Guide - Package Management</li> <li>Midnight Commander vs Ranger</li> <li>Linux directory system explained</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"05/","title":"Day 5 - More or less\u2026","text":"<ul> <li>Lesson video</li> </ul>"},{"location":"05/#intro","title":"INTRO","text":"<p>Today we\u2019ll end with a bang - with a quick introduction to five different topics. Mastery isn\u2019t required today - you\u2019ll be getting plenty of practice with all these in the sessions to come!</p> <p>Don\u2019t be misled by how simplistic some of these commands may seem - they all have hidden depths and many sysadmins will be using several of these every day.</p>"},{"location":"05/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Use tab completion</li> <li>Search in the command history</li> <li>Read a dot file using more and less</li> <li>Change / customize your prompt</li> </ul> <p>Use the links in the Resources section to complete these tasks:</p> <ul> <li> <p>Get familiar with using <code>more</code> and <code>less</code> for viewing files, including being able to get to the top or bottom of a file in <code>less</code>, and searching for some text</p> </li> <li> <p>Test how \u201ctab completion\u201d works - this is a handy feature that helps you enter commands correctly. It helps find both the command and also file name parameters, so typing <code>les</code> then hitting \u201cTab\u201d will complete the command <code>less</code>, but also typing <code>less /etc/serv</code> and pressing \u201cTab\u201d will complete to <code>less /etc/services</code>. Try typing <code>less /etc/s</code> then pressing \u201cTab\u201d, and again, to see how the feature handles ambiguity.</p> </li> <li> <p>Now that you\u2019ve typed in quite a few commands, try pressing the \u201cUp arrow\u201d to scroll back through them. What you should notice is that not only can you see your most recent commands - but even those from the last time you logged in. Now try the <code>history</code>  command - this lists out the whole of your cached command history - often 100 or more entries. There are number of clever things that can be done with this. The simplest is to repeat a command - pick one line to repeat (say number 20)  and repeat it by typing !20 and pressing \u201cEnter\u201d. Later when you\u2019ll  be typing long, complex, commands this can be very handy. You can also press <code>Ctrl + r</code>, then start typing any part of the command that you are looking for. You\u2019ll see an autocomplete of a past command at your prompt. If you keep typing, you\u2019ll get more specific options appear.  You can either run it by pressing return, or editing it first by pressing arrows or other movement keys.  You can also keep pressing <code>Ctrl + r</code> to see other instances of the same command you used with different options.</p> </li> <li> <p>Look for \u201chidden\u201d files in your home directory. In Linux the convention is simply that any file starting with a \u201c.\u201d character is hidden. So, type <code>cd</code> to return to your \u201chome directory\u201d then <code>ls -l</code> to show what files are there. Now type <code>ls -la</code> or <code>ls -ltra</code> (the \u201ca\u201d is for \u201call\u201d) to show all the files - including those starting with a dot. By far the most common use of \u201cdot files\u201d is to keep personal settings in a home directory. So use your new skills with <code>less</code> to look at the contents of  <code>.bashrc</code> ,  <code>.bash_history</code> and others.</p> </li> <li> <p>Finally, use the <code>nano</code> editor to create a file in your home directory and type up a summary of how the last five days have worked for you.</p> </li> </ul>"},{"location":"05/#extension","title":"EXTENSION","text":"<p>We\u2019re using <code>bash</code> as our terminal shell for now (it is standard in many distros) but it is not the only one out there. If you want to test out zsh, fish or oh-my-zsh, you will see that there are a few differences and the features are usually the main differentiator. Try that, poke around.</p> <p>After that, you can go up a notch and try to have several shell sessions open at the same time in the same terminal window with a terminal multiplexer. Try screen - that\u2019s a little simpler and maybe too terse in the beginning - or tmux, that have many features and colors. There are so much material out there on \u201chow to customize your tmux\u201d, have fun.</p>"},{"location":"05/#resources","title":"RESOURCES","text":"<ul> <li>Unix Less Command: 10 Tips for Effective Navigation</li> <li>How To Use Bash History Commands and Expansions\u2026</li> <li>BASH Shell commands less</li> <li>Tab completion</li> <li>What are dotfiles?</li> <li>Nano editor tutorials</li> <li>Bash Shell: Take Control of PS1, PS2, PS3, PS4 and PROMPT_COMMAND</li> <li>Bash Shell PS1: 10 Examples to Make Your Linux Prompt like Angelina Jolie</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"06/","title":"Day 6 - Editing with \u201cvim\u201d","text":"<ul> <li>Complementary video</li> </ul>"},{"location":"06/#intro","title":"INTRO","text":"<p>Simple text files are at the heart of Linux, so editing these is a key sysadmin skill. There are a range of simple text editors aimed at beginners. Some more common examples you\u2019ll see are <code>nano</code> and <code>pico</code>. These look as if they were written for DOS back in the 1980\u2019s - but are pretty easy to \u201cjust figure out\u201d.</p> <p>The Real Sysadmin<sup>tm</sup> however, uses <code>vi</code>  - this is the editor that\u2019s always installed by default - and today you\u2019ll get started using it.</p> <p>Bill Joy wrote Vi back in the mid 1970\u2019s - and even the \u201cmodern\u201d Vim that we\u2019ll concentrate on is over 20 years old, but despite their age, these remain the standard editors on command-line server boxes. Additionally, they have a loyal following among programmers, and even some writers. Vim is actually a contraction of Vi IMproved and is a direct descendant of Vi.</p> <p>Very often when you type <code>vi</code>, what the system actually starts is <code>vim</code>. To see if this is true of your system type, run:</p> <pre><code>vi --version\n</code></pre> <p>You should see output similar to the following if the <code>vi</code> command is actually symlinked to <code>vim</code>:</p> <pre><code>user@testbox:~$ vi --version\nVIM - Vi IMproved 8.2 (2019 Dec 12, compiled Oct 01 2021 01:51:08)\nIncluded patches: 1-2434\nExtra patches: 8.2.3402, 8.2.3403, 8.2.3409, 8.2.3428\nModified by team+vim@tracker.debian.org\nCompiled by team+vim@tracker.debian.org\n...\n</code></pre>"},{"location":"06/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Run vimtutor</li> <li>Edit a file with vim</li> </ul>"},{"location":"06/#what-if-i-dont-have-vim-installed","title":"WHAT IF I DON\u2019T HAVE VIM INSTALLED?","text":"<p>The rest of this lesson assumes that you have <code>vim</code> installed on your system, which it often is by default. But in some cases it isn\u2019t and if you try to run the <code>vim</code> commands below you may get an error like the following:</p> <pre><code>user@testbox:~$ vim\n-bash: vim: command not found\n</code></pre>"},{"location":"06/#option-1-alias-vim","title":"OPTION 1 - ALIAS VIM","text":"<p>One option is to simply substitute <code>vi</code> for any of the <code>vim</code> commands in the instructions below. Vim is reverse compatible with Vi and all of the below exercises should work the same for Vi as well as for Vim. To make  things easier on ourselves we can just alias the <code>vim</code> command so that <code>vi</code>  runs instead:</p> <pre><code>echo \"alias vim='vi'\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre>"},{"location":"06/#option-2-install-vim","title":"OPTION 2 - INSTALL VIM","text":"<p>The other option, and the option that many sysadmins would probably take is to install Vim if it isn\u2019t installed already.</p> <p>To install Vim on Ubuntu using the system package manager, run:</p> <pre><code>sudo apt install vim\n</code></pre> <p>Note: Since Ubuntu Server LTS is the recommended Linux distribution to use for the Linux Upskill Challenge, installing Vim for all of the other various Linux \u201cdistros\u201d is outside of the scope of this lesson. The command above \u201cshould\u201d work for most Debian-family Linux OS\u2019s however, so if you\u2019re running Mint, Debian, Pop!_OS, or one of the many other flavors of Ubuntu, give it a try. For Linux distros outside of the Debian-family a few simple web-searches will probably help you find how to install Vim using other Linux\u2019s package managers.</p>"},{"location":"06/#the-two-things-you-need-to-know","title":"THE TWO THINGS YOU NEED TO KNOW","text":"<ul> <li>There are two \u201cmodes\u201d - with very different behaviours</li> <li>Little or nothing onscreen lets you know which mode you\u2019re currently in!</li> </ul> <p>The two modes are \u201cnormal mode\u201d and \u201cinsert mode\u201d, and as a beginner, simply remember:</p> <p><code>\"Press Esc twice or more to return to normal mode\"</code></p> <p>The \u201cnormal mode\u201d is used to input commands, and \u201cinsert mode\u201d for writing text - similar to a regular text editor\u2019s default behaviour.</p>"},{"location":"06/#instructions","title":"INSTRUCTIONS","text":"<p>So, first grab a text file to edit. A copy of <code>/etc/services</code> will do nicely:</p> <pre><code>cd\npwd\ncp -v /etc/services testfile\nvim testfile\n</code></pre> <p>At this point we have the file on screen, and we are in \u201cnormal mode\u201d. Unlike <code>nano</code>, however, there\u2019s no onscreen menu and it\u2019s not at all obvious how anything works!</p> <p>Start by pressing Esc once or twice to ensure that we are in normal mode (remember this trick from above), then type <code>:q!</code> and press Enter. This quits without saving any changes - a vital first skill when you don\u2019t yet know what you\u2019re doing! Now let\u2019s go in again and play around, seeing how powerful and dangerous <code>vim</code> is - then again, quit without saving:</p> <pre><code>vim testfile\n</code></pre> <p>Use the keys h j k and l to move around (this is the traditional <code>vi</code> method) then try using the arrow keys - if these work, then feel free to use them - but remember those hjkl keys because one day you may be on a system with just the traditional <code>vi</code> and the arrow keys won\u2019t work.</p> <p>Now play around moving through the file. Then exit with Esc Esc <code>:q!</code> as discussed earlier.</p> <p>Now that you\u2019ve mastered that, let\u2019s get more advanced.</p> <pre><code>vim testfile\n</code></pre> <p>This time, move down a few lines into the file and press 3 then 3 again, then d and d again - and suddenly 33 lines of the file are deleted!</p> <p>Why? Well, you are in normal mode and 33dd is a command that says \u201cdelete 33 lines\u201d. Now, you\u2019re still in normal mode, so press u - and you\u2019ve magically undone the last change you made. Neat huh?</p> <p>Now you know the three basic tricks for a newbie to <code>vim</code>:</p> <ul> <li>Esc Esc always gets you back to \u201cnormal mode\u201d</li> <li>From normal mode  <code>:q!</code> will always quit without saving anything you\u2019ve done, and</li> <li>From normal mode <code>u</code> will undo the last action</li> </ul> <p>So, here\u2019s some useful, productive things to do:</p> <ul> <li>Finding things: From normal mode, type <code>G</code> to get to the bottom of the file, then <code>gg</code> to get to the top. Let\u2019s search for references to \u201csun\u201d, type <code>/sun</code> to find the first instance, hit enter, then press n repeatedly to step through all the next occurrences. Now go to the top of the file (gg remember) and try searching for \u201cApple\u201d or \u201cMicrosoft\u201d.</li> <li>Cutting and pasting: Go back up to the top of the file (with gg) and look at the first few lines of comments (the ones with \u201c#\u201d as the first character).  Play around with cutting some of these out, and pasting them back. To do this simply position the cursor on a line, then (for example),  type 11dd to delete 11 lines, then immediately paste them back in by pressing P - and then move down the file a bit and paste the same 11 lines in there again with P</li> <li>Inserting text: Move anywhere in the file and press i to get into \u201cinsert mode\u201d (it may show at the bottom of the screen) and start typing - and Esc Esc to get back into normal mode when you\u2019re done.</li> <li>Writing your changes to disk: From normal mode type <code>:w</code> to \u201cwrite\u201d but stay in <code>vim</code>, or <code>:wq</code> to \u201cwrite and quit\u201d.</li> </ul> <p>This is as much as you ever need to learn about <code>vim</code> - but there\u2019s an enormous amount more you could learn if you had the time. Your next step should be to run <code>vimtutor</code> and go through the \u201cofficial\u201d Vim tutorial. It typically takes around 30 minutes the first time through. To solidify your Vim skills make a habit of running through the vimtutor every day for 1-2 weeks and you should have a solid foundation with the basics.</p> <p>Note: If you aliased vim to vi for the excercises above, now might be a good time to install vim since this is what provides the <code>vimtutor</code> command. Once you have Vim installed, you can run <code>:help vimtutor</code> from inside of Vim to view the help as well as a few other tips/tricks.</p> <p>However, if you\u2019re serious about becoming a sysadmin, it\u2019s important that you commit to using <code>vim</code> (or <code>vi</code>) for all of your editing from now on.</p> <p>One last thing, you may see reference to is the Vi vs. Emacs debate. This is a long running rivalry for programmers, not system administrators - <code>vi/vim</code>  is what you need to learn.</p>"},{"location":"06/#why-cant-i-just-stick-with-nano","title":"WHY CAN\u2019T I JUST STICK WITH NANO?","text":"<ul> <li> <p>In many situations as a professional, you\u2019ll be working on other people\u2019s systems, and they\u2019re often very paranoid about stability. You may not have the authority to just \u201csudo apt install \u201d - even if technically you could. <li> <p>However, <code>vi</code> is always installed on any Unix or Linux box from tiny IoT devices to supercomputer clusters. It is actually required by the Single Unix Specification and POSIX.</p> </li> <li> <p>And frankly it\u2019s a shibboleth for Linux pros. As a newbie in an interview it\u2019s fine to say you\u2019re \u201conly a beginner with vi/vim\u201d - but very risky to say you hate it and can never remember how to exit.</p> </li> <p>So, it makes sense if you\u2019re aiming to do Linux professionally, but if you\u2019re just working on your own systems then by all means choose <code>nano</code> or <code>pico</code> etc.</p>"},{"location":"06/#extension","title":"EXTENSION","text":"<p>If you\u2019re already familiar with <code>vi</code> / <code>vim</code> then use today\u2019s hour to research and test some customisation via your <code>~/.vimrc</code> file. The link below is specifically for sysadmins:</p> <ul> <li>Getting more out of Vim</li> </ul>"},{"location":"06/#resources","title":"RESOURCES","text":"<ul> <li>Here is why <code>vim</code> uses the hjkl keys as arrow keys</li> <li>Graphical vi-vim Cheat Sheet and Tutorial</li> <li>Vi - Vim Tutorial (video)</li> <li>How to Copy, Cut and Paste in Vim / Vi</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"07/","title":"Day 7 - The server and its services","text":"<ul> <li>Lesson video</li> </ul>"},{"location":"07/#intro","title":"INTRO","text":"<p>Today you\u2019ll install a common server application - the Apache2 web server - also known as httpd - the \u201cHyper Text Transport Protocol Daemon\u201d!</p> <p>If you\u2019re a website professional then you might do things slightly differently, but our focus with this is not on Apache itself, or the website content, but to get a better understanding of:</p> <ul> <li>application installation</li> <li>configuration files</li> <li>services</li> <li>logs</li> </ul>"},{"location":"07/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Install and run apache, transforming your server into a web server</li> </ul>"},{"location":"07/#instructions","title":"INSTRUCTIONS","text":"<ul> <li>Refresh your list of available packages (apps) by: <code>sudo apt update</code> - this takes a moment or two, but ensures that you\u2019ll be getting the latest versions.</li> <li>Install Apache from the repository with a simple:  <code>sudo apt install apache2</code></li> <li>Confirm that it\u2019s running by browsing to http://[external IP of your server]  - where you should see a confirmation page.</li> <li>Apache is installed as a \u201cservice\u201d - a program that starts automatically when the server starts and keeps running whether anyone is logged in or not. Try stopping it with the command: <code>sudo systemctl stop apache2</code> - check that the webpage goes dead - then re-start it with <code>sudo systemctl start apache2</code> - and check its status with: <code>systemctl status apache2</code>.</li> <li>As with the vast majority of Linux software, configuration is controlled by files under the /etc directory - check the configuration files under <code>/etc/apache2</code>  especially <code>/etc/apache2/apache2.conf</code> - you can use <code>less</code> to simply view them, or the <code>vim</code> editor to view and edit as you wish.</li> <li>In <code>/etc/apache2/apache2.conf</code> there\u2019s the line with the text: \u201cIncludeOptional conf-enabled/*.conf\u201d. This tells Apache that the *.conf files in the subdirectory conf-enabled should be merged in with those from <code>/etc/apache2/apache2.conf</code> at load. This approach of lots of small specific config files is common.</li> <li>If you\u2019re familiar with configuring web servers, then go crazy, setup some virtual hosts, or add in some mods etc.</li> <li>The location of the default webpage is defined by the DocumentRoot parameter in the file <code>/etc/apache2/sites-enabled/000-default.conf</code>.</li> <li>Use <code>less</code> or <code>vim</code> to view the code of the default page - normally at <code>/var/www/html/index.html</code>. This uses fairly complex modern web design - so in your ssh session <code>sudo vim /var/www/html/index.html</code>, first delete the existing content (use the vim tricks you learned yesterday) and then replace it with a simpler code. You can just put plain text there and it will work, you\u2019re not obligated to add HTML tags to display simple text. But you might like to browse to our sample server http://142.93.60.184/ and use our sample code. View the result with your workstation browser by again going to http://[external IP of your server]</li> <li>As with most Linux services, Apache keeps its logs under the <code>/var/log</code> directory - look at the logs in <code>/var/log/apache2</code> - in the <code>access.log</code> file you should be able to see your session from when you browsed to the test page. Notice that there\u2019s an overwhelming amount of detail - this is typical, but in a later lesson you\u2019ll learn how to filter out just what you want. Notice the <code>error.log</code> file too - hopefully this one will be empty!</li> </ul>"},{"location":"07/#note-for-awsazuregcpoci-users","title":"Note for AWS/Azure/GCP/OCI users","text":"<p>Don\u2019t forget to add port 80 to your instance security group to allow inbound traffic to your server.</p> <ul> <li>AWS</li> <li>Azure</li> <li>GCP</li> <li>Oracle Cloud Infrastructure</li> </ul>"},{"location":"07/#posting-your-progress","title":"POSTING YOUR PROGRESS","text":"<p>Practice your text-editing skills, and allow your \u201cclassmates\u201d to judge your progress by editing <code>/var/www/html/index.html</code> with <code>vim</code> and posting the URL to access it to the forum. (It doesn\u2019t have to be pretty!)</p>"},{"location":"07/#security","title":"SECURITY","text":"<ul> <li>As the sysadmin of this server, responsible for its security, you need to be very aware that you\u2019ve now increased the \u201cattack surface\u201d of your server. In addition to ssh on port 22, you are now also exposing the apache2 code on port 80. Over time the logs may reveal access from a wide range of visiting search engines, and attackers - and that\u2019s perfectly normal.</li> <li>If you run the commands: <code>sudo apt update</code>, then <code>sudo apt upgrade</code>, and accept the suggested upgrades, then you\u2019ll have all the latest security updates, and be secure enough for a test environment - but you should re-run this regularly.</li> </ul>"},{"location":"07/#extension","title":"EXTENSION","text":"<p>Read up on:</p> <ul> <li>Using systemctl to manage services</li> </ul>"},{"location":"07/#resources","title":"RESOURCES","text":"<ul> <li>HTTPD - Apache2 Web Server</li> <li>The Apache HTTP Server</li> </ul>"},{"location":"07/#troubleshoot-and-make-a-sad-server-happy","title":"TROUBLESHOOT AND MAKE A SAD SERVER HAPPY!","text":"<p>Practice what you\u2019ve learned with some challenges at SadServers.com:</p> <ul> <li>\u201cCape Town\u201d: Borked Nginx</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"08/","title":"Day 8 - The infamous \u201cgrep\u201d and other text processors","text":"<ul> <li>Lesson video</li> </ul>"},{"location":"08/#intro","title":"INTRO","text":"<p>Your server is now running two services: the sshd (Secure Shell Daemon) service that you use to login; and the Apache2 web server. Both of these services are generating logs as you and others access your server - and these are text files which we can analyse using some simple tools.</p> <p>Plain text files are a key part of \u201cthe Unix way\u201d and there are many small \u201ctools\u201d to allow you to easily edit, sort, search and otherwise manipulate them. Today we\u2019ll use <code>grep</code>, <code>cat</code>, <code>more</code>, <code>less</code>, <code>cut</code>, <code>awk</code> and <code>tail</code> to slice and dice your logs.</p> <p>The <code>grep</code> command is famous for being extremely powerful and handy, but also because its \u201cnerdy\u201d name is typical of Unix/Linux conventions.</p>"},{"location":"08/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Dump out the complete contents of a file with <code>cat</code> like this: <code>cat /var/log/apache2/access.log</code></li> <li>Use <code>less</code> to open the same file, like this: <code>less /var/log/apache2/access.log</code> - and move up and down through the file with your arrow keys, then use \u201cq\u201d to quit.</li> <li>Again using <code>less</code>, look at a file, but practice confidently moving around using  gg, GG and /,  n and N (to go to the top of the file, bottom of the file, to search for something and to hop to the next \u201chit\u201d or back to the previous one)</li> <li>View recent logins and <code>sudo</code> usage by viewing <code>/var/log/auth.log</code> with <code>less</code></li> <li>Look at just the tail end of the file with <code>tail /var/log/apache2/access.log</code> (yes, there\u2019s also a <code>head</code> command!)</li> <li>Follow a log in real-time with: <code>tail -f /var/log/apache2/access.log</code>  (while accessing your server\u2019s web page in a browser)</li> <li>You can take the output of one command and \u201cpipe\u201d it in as the input to another by using the <code>|</code> (pipe) symbol</li> <li>So, dump out a file with <code>cat</code>, but pipe that output to <code>grep</code> with a search term - like this: <code>cat /var/log/auth.log  | grep \"authenticating\"</code></li> <li>Simplify this to: <code>grep \"authenticating\" /var/log/auth.log</code></li> <li>Piping allows you to narrow your search, e.g.  <code>grep \"authenticating\" /var/log/auth.log | grep \"root\"</code></li> <li>Use the <code>cut</code> command to select out most interesting portions of each line by specifying \u201c-d\u201d (delimiter) and \u201c-f\u201d (field) - like: <code>grep \"authenticating\" /var/log/auth.log| grep \"root\"| cut -f 10- -d\" \"</code>   (field 10 onwards, where the delimiter between field is the \u201d \u201d character). This approach can be very useful in extracting useful information from log data.</li> <li>Use the <code>-v</code> option to invert the selection and find attempts to login with other users: <code>grep \"authenticating\" /var/log/auth.log| grep -v \"root\"| cut -f 10- -d\" \"</code></li> </ul> <p>The output of any command can be \u201credirected\u201d to a file with the \u201c&gt;\u201d operator. The command: <code>ls -ltr &gt; listing.txt</code> wouldn\u2019t list the directory contents to your screen, but instead redirect into the file \u201clisting.txt\u201d (creating that file if it didn\u2019t exist, or overwriting the contents if it did).</p>"},{"location":"08/#wheres-my-varlogauthlog","title":"WHERE\u2019S MY /VAR/LOG/AUTH.LOG?","text":"<p>If you didn\u2019t find the file <code>/var/log/auth.log</code> you\u2019re probably using a minimal version of Ubuntu (it can be your own local VM or a version in one of the VPS). That minimal image is, well\u2026 minimal. It only has the systemd journal available and it didn\u2019t come with the old syslog system by default.</p> <p>But don\u2019t worry! To get that back, <code>sudo apt install rsyslog</code> and the file will be created. Just give it a few minutes to populate before working on the lesson.</p> <p>It also be missing a few of the other programs we use in the challenge, but you can always install them.</p>"},{"location":"08/#posting-your-progress","title":"POSTING YOUR PROGRESS","text":"<p>Re-run the command to list all the IP\u2019s that have unsuccessfully tried to login to your server as root - but this time, use the the \u201c&gt;\u201d operator to redirect it to the file: <code>~/attackers.txt</code>. You might like to share and compare with others doing the course how heavily you\u2019re \u201cunder attack\u201d!</p>"},{"location":"08/#extension","title":"EXTENSION","text":"<ul> <li>See if you can extend your filtering of <code>auth.log</code> to select just the IP addresses, then pipe this to  <code>sort</code>, and then further to <code>uniq</code> to get a list of all those IP addresses that have been \u201cauditing\u201d your server security for you.</li> <li>Investigate the <code>awk</code> and <code>sed</code> commands. When you\u2019re having difficulty figuring out how to do something with <code>grep</code> and <code>cut</code>, then you may need to step up to using these. Googling for \u201clinux sed tricks\u201d or \u201cawk one liners\u201d will get you many examples.</li> <li>Aim to learn at least one simple useful trick with both <code>awk</code> and <code>sed</code></li> </ul>"},{"location":"08/#resources","title":"RESOURCES","text":"<ul> <li>Text processing commands</li> <li>OSTechNix grep tutorial</li> <li>Where GREP came from</li> <li>SED onliners</li> <li>RegExr - a tool to learn, build and test Regular Expressions</li> <li>explainshell.com - write down a command-line to see the help text that matches each argument</li> </ul>"},{"location":"08/#troubleshoot-and-make-a-sad-server-happy","title":"TROUBLESHOOT AND MAKE A SAD SERVER HAPPY!","text":"<p>Practice what you\u2019ve learned with some challenges at SadServers.com:</p> <ul> <li>\u201cSaskatoon\u201d: counting IPs.</li> <li>\u201cThe Command Line Murders\u201d</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"09/","title":"Day 9 - Diving into networking","text":"<ul> <li>Lesson video</li> </ul>"},{"location":"09/#intro","title":"INTRO","text":"<p>The two services your server is now running are sshd for remote login, and apache2 for web access. These are both \u201copen to the world\u201d via the TCP/IP \u201cports\u201d - 22  and 80.</p> <p>As a sysadmin, you need to understand what ports you have open on your servers because each open port is also a potential focus of attacks. You need to be be able to put in place appropriate monitoring and controls.</p>"},{"location":"09/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Secure your web server by using a firewall</li> </ul>"},{"location":"09/#instructions","title":"INSTRUCTIONS","text":"<p>First we\u2019ll look at a couple of ways of determining what ports are open on your server:</p> <ul> <li><code>ss</code> - this, \u201csocket status\u201d, is a standard utility - replacing the older <code>netstat</code></li> <li><code>nmap</code> - this \u201cport scanner\u201d won\u2019t normally be installed by default</li> </ul> <p>There are a wide range of options that can be used with ss, but first try: ss -ltpn</p> <p>The output lines show which ports are open on which interfaces:</p> <pre><code>sudo ss -ltp\nState   Recv-Q  Send-Q   Local Address:Port     Peer Address:Port  Process\nLISTEN  0       4096     127.0.0.53%lo:53        0.0.0.0:*      users:((\"systemd-resolve\",pid=364,fd=13))\nLISTEN  0       128            0.0.0.0:22           0.0.0.0:*      users:((\"sshd\",pid=625,fd=3))\nLISTEN  0       128               [::]:22              [::]:*      users:((\"sshd\",pid=625,fd=4))\nLISTEN  0       511                  *:80                *:*      users:((\"apache2\",pid=106630,fd=4),(\"apache2\",pid=106629,fd=4),(\"apache2\",pid=106627,fd=4))\n</code></pre> <p>The network notation can be a little confusing, but the lines above show ports 80 and 22 open \u201cto the world\u201d on all local IP addresses - and port 53 (DNS) open only on a special local address.</p> <p>Now install <code>nmap</code> with <code>apt install</code>. This works rather differently, actively probing 1,000 or more ports to check whether they\u2019re open. It\u2019s most famously used to scan remote machines - please don\u2019t - but it\u2019s also very handy to check your own configuration, by scanning your server:</p> <pre><code>$ nmap localhost\n\nStarting Nmap 5.21 ( http://nmap.org ) at 2013-03-17 02:18 UTC\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.00042s latency).\nNot shown: 998 closed ports\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\nNmap done: 1 IP address (1 host up) scanned in 0.08 seconds\n</code></pre> <p>Port 22 is providing the ssh service, which is how you\u2019re connected, so that will be open. If you have Apache running then port 80/http will also be open. Every open port is an increase in the \u201cattack surface\u201d, so it\u2019s Best Practice to shut down services that you don\u2019t need.</p> <p>Note that however that \u201clocalhost\u201d (127.0.0.1), is the loopback network device. Services \u201cbound\u201d only to this will only be available on this local machine. To see what\u2019s actually exposed to others, first use the <code>ip a</code> command to find the IP address of your actual network card, and then <code>nmap</code> that.</p>"},{"location":"09/#host-firewall","title":"Host firewall","text":"<p>The Linux kernel has built-in firewall functionality called \u201cnetfilter\u201d. We configure and query this via various utilities,  the most low-level of which are the <code>iptables</code> command, and the newer <code>nftables</code>. These are powerful, but also complex - so we\u2019ll use a more friendly alternative - <code>ufw</code> - the \u201cuncomplicated firewall\u201d.</p> <p>First let\u2019s list what rules are in place by typing <code>sudo iptables -L</code></p> <p>You will see something like this:</p> <pre><code>Chain INPUT (policy ACCEPT)\ntarget  prot opt source             destination\n\nChain FORWARD (policy ACCEPT)\ntarget  prot opt source             destination\n\nChain OUTPUT (policy ACCEPT)\ntarget  prot opt source             destination\n</code></pre> <p>So, essentially no firewalling - any traffic is accepted to anywhere.</p> <p>Using <code>ufw</code> is very simple. It is available by default in all Ubuntu installations after 8.04 LTS, but if you need to install it:</p> <pre><code>sudo apt install ufw\n</code></pre> <p>Then, to allow SSH, but disallow HTTP we would type:</p> <pre><code>sudo ufw allow ssh\nsudo ufw deny http\n</code></pre> <p>BEWARE! Don\u2019t forget to explicitly ALLOW <code>ssh</code>, or you\u2019ll lose all contact with your server! If not allowed, the firewall assumes the port is DENIED by default.</p> <p>And then enable this with:</p> <pre><code>sudo ufw enable\n</code></pre> <p>Typing <code>sudo iptables -L</code> now will list the detailed rules generated by this - one of these should now be:</p> <pre><code>\u201cDROP       tcp  --  anywhere             anywhere             tcp dpt:http\u201d\n</code></pre> <p>The effect of this is that although your server is still running Apache, it\u2019s no longer accessible from the \u201coutside\u201d - all incoming traffic to the destination port of http/80 being DROPed. Test for yourself! You will probably want to reverse this with:</p> <pre><code>sudo ufw allow http\nsudo ufw enable\n</code></pre> <p>In practice, ensuring that you\u2019re not running unnecessary services is often enough protection, and a host-based firewall is unnecessary, but this very much depends on the type of server you are configuring. Regardless, hopefully this session has given you some insight into the concepts.</p> <p>BTW: For this test/learning server you should allow http/80 access again now, because those <code>access.log</code> files will give you a real feel for what it\u2019s like to run a server in a hostile world.</p>"},{"location":"09/#using-non-standard-ports","title":"Using non-standard ports","text":"<p>Occasionally it may be reasonable to re-configure a service so that it\u2019s provided on a non-standard port - this is particularly common advice for ssh/22 - and would be done by altering the configuration in <code>/etc/ssh/sshd_config</code>.</p> <p>Some call this \u201csecurity by obscurity\u201d - equivalent to moving the keyhole on your front door to an unusual place rather than improving the lock itself, or camouflaging your tank rather than improving its armour - but it does effectively eliminate attacks by opportunistic hackers, which is the main threat for most servers.</p> <p>But, if you\u2019re going to do it, remember all the rules and security tools you already have in place. If you are using AWS, for example, and change the SSH port to 2222, you will need to open that port in the EC2 security group for your instance.</p>"},{"location":"09/#extension","title":"EXTENSION","text":"<p>Even after denying access, it might be useful to know who\u2019s been trying to gain entry. Check out these discussions of logging and more complex setups:</p> <ul> <li>How to Log Linux IPTables Firewall Dropped Packets to a Log File</li> <li>Iptables How To</li> </ul>"},{"location":"09/#resources","title":"RESOURCES","text":"<ul> <li>12 ss Command Examples to Monitor Network Connections</li> <li>UFW - Uncomplicated Firewall</li> <li>Collection of basic Linux Firewall iptables rules</li> <li>10 Netstat Command Example</li> <li>UFW Uncomplicated Firewall (video)</li> <li>How to install nftables in Ubuntu</li> <li>No, moving your ssh port isn\u2019t security by obscurity</li> <li>Port knocking</li> </ul>"},{"location":"09/#troubleshoot-and-make-a-sad-server-happy","title":"TROUBLESHOOT AND MAKE A SAD SERVER HAPPY!","text":"<p>Practice what you\u2019ve learned with some challenges at SadServers.com:</p> <ul> <li>\u201cTokyo\u201d: can\u2019t serve web file</li> <li>\u201cTaipei\u201d: Come a-knocking</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"10/","title":"Day 10 - Scheduling tasks","text":"<ul> <li>Complementary video</li> </ul>"},{"location":"10/#introduction","title":"Introduction","text":"<p>Linux has a rich set of features for running scheduled tasks. One of the key attributes of a good sysadmin is getting the computer to do your work for you (sometimes misrepresented as laziness!) -  and a well configured set of scheduled tasks is key to keeping your server running well.</p> <p>The time-based job scheduler cron(8) is the one most commonly used by Linux sysadmins. It\u2019s been around more or less in it\u2019s current form since Unix System V and uses a standardized syntax that\u2019s in widespread use.</p>"},{"location":"10/#using-at-to-schedule-oneshot-tasks","title":"Using at to schedule oneshot tasks","text":"<p>If you\u2019re on Ubuntu, you will likely need to install the at package first.</p> <pre><code>sudo apt update\nsudo apt install at\n</code></pre> <p>We\u2019ll use the <code>at</code> command to schedule a one time task to be ran at some point  in the future.</p> <p>Next, let\u2019s print the filename of the terminal connected to standard input (in Linux everything is a file, including your terminal!). We\u2019re going to echo something to our terminal at some point in the future to get an idea of how scheduling future tasks with at works.</p> <pre><code>vagrant@ubuntu2204:~$ tty\n/dev/pts/0\n</code></pre> <p>Now we\u2019ll schedule a command to echo a greeting to our terminal 1 minute in the future.</p> <pre><code>vagrant@ubuntu2204:~$ echo 'echo \"Greetings $USER!\" &gt; /dev/pts/0' | at now + 1 minutes\nwarning: commands will be executed using /bin/sh\njob 2 at Sun May 26 06:30:00 2024\n</code></pre> <p>After several seconds, a greeting should be printed to our terminal.</p> <pre><code>...\nvagrant@ubuntu2204:~$ Greetings vagrant!\n</code></pre> <p>It\u2019s not as common for this to be used to schedule one time tasks, but if you ever needed to, now you have an idea of how this might work. In the next section we\u2019ll learn about scheduling time-based tasks using cron and crontab.</p> <p>For a more in-depth exploration of scheduling things with <code>at</code> review the relevant articles in the further reading section below.</p>"},{"location":"10/#using-crontab-to-schedule-jobs","title":"Using crontab to schedule jobs","text":"<p>In Linux we use the <code>crontab</code> command to interact with tasks scheduled with the cron daemon. Each user, including the root user, can schedule jobs that run as their user.</p> <p>Display your user\u2019s crontab with <code>crontab -l</code>.</p> <pre><code>vagrant@ubuntu2204:~$ crontab -l\nno crontab for vagrant\n</code></pre> <p>Unless you\u2019ve already created a crontab for your user, you probably won\u2019t have one yet. Let\u2019s create a simple cronjob to understand how it works.</p> <p>Using the <code>crontab -e</code> command, let\u2019s create our first cronjob. On Ubuntu, if this is you\u2019re first time editing a crontab you will be greeted with a menu to choose your preferred editor.</p> <pre><code>vagrant@ubuntu2204:~$ crontab -e\nno crontab for vagrant - using an empty one\n\nSelect an editor.  To change later, run 'select-editor'.\n  1. /bin/nano        &lt;---- easiest\n  2. /usr/bin/vim.basic\n  3. /usr/bin/vim.tiny\n  4. /bin/ed\n\nChoose 1-4 [1]: 2\n</code></pre> <p>Choose whatever your preferred editor is then press Enter.</p> <p>At the bottom of the file add the following cronjob and then save and quit the file.</p> <pre><code>* * * * * echo \"Hello world!\" &gt; /dev/pts/0\n</code></pre> <p>NOTE: Make sure that the <code>/dev/pts/0</code> file path matches whatever was printed by your <code>tty</code> command above.</p> <p>Next, let\u2019s take a look at the crontab we just installed by running <code>crontab -l</code> again. You should see the cronjob you created printed to your terminal.</p> <pre><code>vagrant@ubuntu2204:~$ crontab -l\n* * * * * echo \"Hello world!\" &gt; /dev/pts/0\n</code></pre> <p>This cronjob will print the string <code>Hello world!</code> to your terminal every minute until we remove or update the cronjob. Wait a few minutes and see what it does.</p> <pre><code>vagrant@ubuntu2204:~$ Hello world!\nHello world!\nHello world!\n...\n</code></pre> <p>When you\u2019re ready uninstall the crontab you created with <code>crontab -r</code>.</p>"},{"location":"10/#understanding-crontab-syntax","title":"Understanding crontab syntax","text":"<p>The basic crontab syntax is as follows:</p> <pre><code>* * * * * command to be executed\n- - - - -\n| | | | |\n| | | | ----- Day of week (0 - 7) (Sunday=0 or 7)\n| | | ------- Month (1 - 12)\n| | --------- Day of month (1 - 31)\n| ----------- Hour (0 - 23)\n------------- Minute (0 - 59)\n</code></pre> <ul> <li>Minute values can be from 0 to 59.</li> <li>Hour values can be from 0 to 23.</li> <li>Day of month values can be from 1 to 31.</li> <li>Month values can be from 1 to 12.</li> <li>Day of week values can be from 0 to 6, with 0 denoting Sunday.</li> </ul> <p>There are different operators that can be used as a short-hand to specify multiple values in each field:</p> Symbol Description * Wildcard, specifies every possible time interval , List multiple values separated by a comma. - Specify a range between two numbers, separated by a hyphen / Specify a periodicity/frequency using a slash <p>There\u2019s also a helpful site to check cron schedule expressions at crontab.guru.</p> <p>Use the crontab.guru site to play around with the different expressions to get an idea of how it works or click the random button to generate an expression at random.</p>"},{"location":"10/#your-tasks-today","title":"Your Tasks Today","text":"<ol> <li>Schedule daily backups of user\u2019s home directories</li> <li>Schedule a task that looks for any backups that are more than 7 days old and   deletes them</li> </ol>"},{"location":"10/#automating-common-system-administration-tasks","title":"Automating common system administration tasks","text":"<p>One common use-case that cronjobs are used for is scheduling backups of various things. As the root user, we\u2019re going to create a cronjob that creates a compressed archive of all of the user\u2019s home directories using the <code>tar</code> utility. Tar is short for \u201ctape archive\u201d and harkens back to earlier days of Unix and Linux when data was commonly archived on tape storage similar to cassette tapes.</p> <p>As a general rule, it\u2019s good to test your command or script before installing it as a cronjob. First we\u2019ll create a backup of <code>/home</code> by manually running a version of our <code>tar</code> command.</p> <pre><code>vagrant@ubuntu2204:~$ sudo tar -czvf /var/backups/home.tar.gz /home/\ntar: Removing leading `/' from member names\n/home/\n/home/ubuntu/\n/home/ubuntu/.profile\n/home/ubuntu/.bash_logout\n/home/ubuntu/.bashrc\n/home/ubuntu/.ssh/\n/home/ubuntu/.ssh/authorized_keys\n...\n</code></pre> <p>NOTE: We\u2019re passing the <code>-v</code> verbose flag to <code>tar</code> so that we can see better what it\u2019s doing. <code>-czf</code> stand for \u201ccreate\u201d, \u201cgzip compress\u201d, and \u201cfile\u201d in that order. See <code>man tar</code> for further details.</p> <p>Let\u2019s also use the <code>date</code> command to allow us to insert the date of the backup into the filename. Since we\u2019ll be taking daily backups, after this cronjob has ran for a few days we will have a few days worth of backups each with it\u2019s own archive tagged with the date.</p> <pre><code>vagrant@ubuntu2204:~$ date\nSun May 26 04:12:13 UTC 2024\n</code></pre> <p>The default string printed by the <code>date</code> command isn\u2019t that useful. Let\u2019s output the date in ISO 8601 format, sometimes referred to as the \u201cISO date\u201d.</p> <pre><code>vagrant@ubuntu2204:~$ date -I\n2024-05-26\n</code></pre> <p>This is a more useful string that we can combine with our <code>tar</code> command to create an archive with today\u2019s date in it.</p> <pre><code>vagrant@ubuntu2204:~$ sudo tar -czvf /var/backups/home.$(date -I).tar.gz /home/\ntar: Removing leading `/' from member names\n/home/\n/home/ubuntu/\n...\n</code></pre> <p>Let\u2019s look at the backups we\u2019ve created to understand how this date command is being inserted into our filename.</p> <pre><code>vagrant@ubuntu2204:~$ ls -l /var/backups\ntotal 16\n-rw-r--r-- 1 root root 8205 May 26 04:16 home.2024-05-26.tar.gz\n-rw-r--r-- 1 root root 3873 May 26 04:07 home.tar.gz\n</code></pre> <p>NOTE: These <code>.tar.gz</code> files are often called tarballs by sysadmins.</p> <p>Create and edit a crontab for root with <code>sudo crontab -e</code> and add the following cronjob.</p> <pre><code>0 5 * * * tar -zcf /var/backups/home.$(date -I).tar.gz /home/\n</code></pre> <p>This cronjob will run every day at 05:00. After a few days there will be several backups of user\u2019s home directories in <code>/var/backups</code>.</p> <p>If we were to let this cronjob run indefinitely, after a while we would end up with a lot of backups in <code>/var/backups</code>. Over time this will cause the disk space being used to grow and could fill our disk. It\u2019s probably best that we don\u2019t let that happen. To mitigate this risk, we\u2019ll setup another cronjob that runs everyday and cleans up old backups that we don\u2019t need to store.</p> <p>The <code>find</code> command is like a swiss army knife for finding files based on all kinds of criteria and listing them or doing other things to them, such as deleting them. We\u2019re going to craft a <code>find</code> command that finds all of the backups we created and deletes any that are older than 7 days.</p> <p>First let\u2019s get an idea of how the <code>find</code> command works by finding all of our backups and listing them.</p> <pre><code>vagrant@ubuntu2204:~$ sudo find /var/backups -name \"home.*.tar.gz\"\n/var/backups/home.2024-05-26.tar.gz\n...\n</code></pre> <p>What this command is doing is looking for all of the files in <code>/var/backups</code> that start with <code>home.</code> and end with <code>.tar.gz</code>. The <code>*</code> is a wildcard character that matches any string.</p> <p>In our case we need to create a scheduled task that will find all of the files older than 7 days in <code>/var/backups</code> and delete them. Run <code>sudo crontab -e</code> and install the following cronjob.</p> <pre><code>30 5 * * * find /var/backups -name \"home.*.tar.gz\" -mtime +7 -delete\n</code></pre> <p>NOTE: The <code>-mtime</code> flag is short for \u201cmodified time\u201d and in our case <code>find</code> is looking for files that were modified more than 7 days ago, that\u2019s what the +7 indicates. The <code>find</code> command will be covered in greater detail on Day 11 - Finding things\u2026.</p> <p>By now, our crontab should look something like this:</p> <pre><code>vagrant@ubuntu2204:~$ sudo crontab -l\n# Daily user dirs backup\n0 5 * * * tar -zcf /var/backups/home.$(date -I).tar.gz /home/\n# Retain 7 days of homedir backups\n30 5 * * * find /var/backups -name \"home.*.tar.gz\" -mtime +7 -delete\n</code></pre> <p>Setting up cronjobs using the <code>find ... -delete</code> syntax is fairly idiomatic of scheduled tasks a system administrator might use to manage files and remove old files that are no longer needed to prevent disks from getting full. It\u2019s not uncommon to see more sophisticated cron scripts that use a combination of tools like <code>tar</code>, <code>find</code>, and <code>rsync</code> to manage backups incrementally or on a schedule and implement a more sophisticated retention policy based on real-world use-cases.</p>"},{"location":"10/#system-crontab","title":"System crontab","text":"<p>There\u2019s also a system-wide crontab defined in <code>/etc/crontab</code>. Let\u2019s take a look at this file.</p> <pre><code>vagrant@ubuntu2204:~$ cat /etc/crontab\n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\n# You can also override PATH, but by default, newer versions inherit it from the environment\n#PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name command to be executed\n17  *  *  *  *  root      cd / &amp;&amp; run-parts --report /etc/cron.hourly\n25  6  *  *  *  root      test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.daily )\n47  6  *  *  7  root      test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.weekly )\n52  6  1  *  *  root      test -x /usr/sbin/anacron || ( cd / &amp;&amp; run-parts --report /etc/cron.monthly )\n</code></pre> <p>By now the basic syntax should be familiar to you, but you\u2019ll notice an extra field user-name. This specifies the user that runs the task and is unique to the system crontab at <code>/etc/crontab</code>.</p> <p>It\u2019s not common for system administrators to use <code>/etc/crontab</code> anymore and instead user\u2019s are encouraged to install their own crontab for their user, even for the root user. User crontab\u2019s are all located in <code>/var/spool/cron</code>. The exact subdirectory tends to vary depending on the distribution.</p> <pre><code>vagrant@ubuntu2204:~$ sudo ls -l /var/spool/cron/crontabs\ntotal 8\n-rw------- 1 root    crontab  392 May 26 04:45 root\n-rw------- 1 vagrant crontab 1108 May 26 05:45 vagrant\n</code></pre> <p>Each user has their own crontab with their user as the filename.</p> <p>Note that the system crontab shown above also manages cronjobs that run daily, weekly, and monthly as scripts in the <code>/etc/cron.*</code> directories. Let\u2019s look at an example.</p> <pre><code>vagrant@ubuntu2204:~$ ls -l /etc/cron.daily\ntotal 20\n-rwxr-xr-x 1 root root  376 Nov 11  2019 apport\n-rwxr-xr-x 1 root root 1478 Apr  8  2022 apt-compat\n-rwxr-xr-x 1 root root  123 Dec  5  2021 dpkg\n-rwxr-xr-x 1 root root  377 Jan 24  2022 logrotate\n-rwxr-xr-x 1 root root 1330 Mar 17  2022 man-db\n</code></pre> <p>Each of these files is a script or a shortcut to a script to do some regular task and they\u2019re run in alphabetic order by <code>run-parts</code>. So in this case apport will run first. Use <code>less</code> or <code>cat</code> to view some of the scripts on your system - many will look very complex and are best left well alone, but others may be just a few lines of simple commands.</p> <pre><code>vagrant@ubuntu2204:~$ cat /etc/cron.daily/dpkg \n#!/bin/sh\n\n# Skip if systemd is running.\nif [ -d /run/systemd/system ]; then\n  exit 0\nfi\n\n/usr/libexec/dpkg/dpkg-db-backup\n</code></pre> <p>As an alternative to scheduling jobs with <code>crontab</code> you may also create a script and put it into one of the <code>/etc/cron.{daily,weekly,monthly}</code> directories and it will get ran at the desired interval.</p>"},{"location":"10/#a-note-about-systemd-timers","title":"A note about systemd timers","text":"<p>All major Linux distributions now include \u201csystemd\u201d. As well as starting and stopping services, this can also be used to run tasks at specific times via \u201ctimers\u201d. See which ones are already configured on your server with:</p> <pre><code>systemctl list-timers\n</code></pre> <p>Use the links in the further reading section to read up about how these timers work.</p>"},{"location":"10/#further-reading","title":"Further reading","text":"<ul> <li>freeCodeCamp: Job Scheduling in RHEL \u2013 cron and at Explained with Examples</li> <li>nixCraft: How To Add Jobs To cron Under Linux or UNIX</li> <li>Arabesque: Cron best practices</li> <li>Linode: Using Cron to Schedule Tasks for Certain Times or Intervals</li> <li>Arch Wiki: A good overview of systemd/Timers</li> <li>How to Use Systemd Timers as a Cron Replacement</li> </ul>"},{"location":"10/#license","title":"License","text":"<p>Some rights reserved. Check the license terms here</p>"},{"location":"11/","title":"Day 11 - Finding things\u2026","text":"<ul> <li>Lesson video</li> <li>Complementary video</li> </ul>"},{"location":"11/#intro","title":"INTRO","text":"<p>Today we\u2019ll look at how you find files, and text inside these files, quickly and efficiently.</p> <p>It can be very frustrating to know that a file or setting exists, but not be able to track it down! Master today\u2019s commands and you\u2019ll be much more confident as you administer your systems.</p> <p>Today you\u2019ll look at some useful tools:</p> <ul> <li><code>locate</code></li> <li><code>find</code></li> <li><code>grep</code></li> <li><code>which</code></li> </ul>"},{"location":"11/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Find all files that have the word \u201cPermission\u201d in it</li> </ul>"},{"location":"11/#instructions","title":"INSTRUCTIONS","text":""},{"location":"11/#locate","title":"locate","text":"<p>If you\u2019re looking for a file called <code>access.log</code> then the quickest approach is to use \u201clocate\u201d like this:</p> <pre><code>$ locate access.log\n/var/log/apache2/access.log\n/var/log/apache2/access.log.1\n/var/log/apache2/access.log.2.gz\n</code></pre> <p>(If <code>locate</code> is not installed, do so with <code>sudo apt install plocate</code>)</p> <p>As you can see, by default it treats a search for \u201csomething\u201d as a search for \u201c*something*\u201c. It\u2019s very fast because it searches an index, but if this index is out of date or missing it may not give you the answer you\u2019re looking for.  This is because the index is created by the <code>updatedb</code> command - typically run only nightly by <code>cron</code>.  It may therefore be out of date for recently added files, so it can be worthwhile updating the index by manually running: <code>sudo updatedb</code>.</p>"},{"location":"11/#find","title":"find","text":"<p>The <code>find</code> command searches down through a directory structure looking for files which match some criteria - which could be name, but also size, or when last updated etc. Try these examples:</p> <pre><code>find /var -name access.log\nfind /home -mtime -3\n</code></pre> <p>The first searches for files with the name \u201caccess.log\u201d, the second for any file under <code>/home</code> with a last-modified date in the last 3 days.</p> <p>These will take longer than <code>locate</code> did because they search through the filesystem directly rather from an index. Also, because <code>find</code> uses the permissions of the logged-in user you\u2019ll get \u201cpermission denied\u201d messages for many directories if you search the whole system. Starting the command with <code>sudo</code> of course will run it as root - or you could filter the errors with <code>grep</code> like this: <code>find /var -name access.log 2&gt;&amp;1 | grep -vi \"Permission denied\"</code>.</p> <p>These examples are just the tip of a very large iceberg, check the articles in the RESOURCES section and work through as many examples as you can - time spent getting really comfortable with <code>find</code> is not wasted.</p>"},{"location":"11/#grep-r","title":"grep -R","text":"<p>Rather than asking \u201cgrep\u201d to search for text within a specific file, you can give it a whole directory structure, and ask it to recursively search down through it, including following all symbolic links (which <code>-r</code> does not). This trick is particularly handy when you \u201cjust know\u201d that an item appears \u201csomewhere\u201d - but are not sure where.</p> <p>As an example, you know that \u201cPermitRootLogin\u201d is an ssh parameter in a config file somewhere under /etc, but can\u2019t recall exactly where it is kept:</p> <p><code>grep -R -i \"PermitRootLogin\" /etc/*</code></p> <p>Because this only works on plain text files, it\u2019s most useful for the <code>/etc</code> and <code>/var/log</code> folders. (Notice the <code>-i</code> which makes the search \u201ccase insensitive\u201d, finding the setting even if it\u2019s been entered as \u201cPermitrootlogin\u201d</p> <p>You may now have logs like <code>/var/log/access.log.2.gz</code> - these are older logs that have been compressed to save disk space - so you can\u2019t read them with <code>less</code>, or search them with <code>grep</code>. However, there are <code>zless</code> and <code>zgrep</code>, which do work, and on ordinary as well as compressed files.</p>"},{"location":"11/#which","title":"which","text":"<p>It\u2019s sometimes useful to know where a command is being run from. If you type <code>nano</code>, and it starts, where is the <code>nano</code> binary coming from? The general rule is that the system will search through the locations setup in your \u201cpath\u201d. To see this type:</p> <p><code>echo $PATH</code></p> <p>To see where <code>nano</code> comes from, type:</p> <p><code>which nano</code></p> <p>Try this for <code>grep</code>, <code>vi</code> and <code>service</code> and <code>reboot</code>. You\u2019ll notice that they\u2019re typically always in subfolders named <code>bin</code>, but that there are several different ones.</p>"},{"location":"11/#extension","title":"EXTENSION","text":"<p>The <code>-exec</code> feature of the <code>find</code> command is extremely powerful. </p> <p>But \u201cfinding things\u201d can go so much further than that! You can not only track down the content of a file, but also its usage with commands like <code>lsof</code> and <code>fuser</code>.</p> <p>Test some examples of this from the RESOURCES links.</p>"},{"location":"11/#resources","title":"RESOURCES","text":"<ul> <li>25 find command examples\u2026</li> <li>10 Tips for using \u201cfind\u201d</li> <li>Five simple recipes for \u201cgrep\u201d</li> <li>How to use the lsof command to troubleshoot Linux</li> <li>Learn \u201cfuser\u201d, a little-known Linux workhorse command!</li> </ul>"},{"location":"11/#troubleshoot-and-make-a-sad-server-happy","title":"TROUBLESHOOT AND MAKE A SAD SERVER HAPPY!","text":"<p>Practice what you\u2019ve learned with some challenges at SadServers.com:</p> <ul> <li>\u201cSaint John\u201d: what is writing to this log file?</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"12/","title":"Day 12 - Transferring files","text":"<ul> <li>Lesson video</li> <li>Complementary video</li> </ul>"},{"location":"12/#intro","title":"INTRO","text":"<p>You\u2019ve now had a working Internet server of your own for some time, and seen how you can create and edit small files there. You\u2019ve created a web server where you\u2019ve been able to edit a simple web page.</p> <p>Today we\u2019ll be looking at how you can move files between your other systems and this server - tasks like:</p> <ul> <li>Taking a copy of some files from your server onto your desktop machine</li> <li>Copying up some text to your server to put on your webpage</li> <li>Uploading some photos and logos for your webpage</li> </ul>"},{"location":"12/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Upload a file to the server</li> <li>Download a file from the server</li> <li>Synchronize a backup</li> </ul>"},{"location":"12/#protocols","title":"PROTOCOLS","text":"<p>There are a wide range of ways a Linux server can share files, including:</p> <ul> <li>SMB: Microsoft\u2019s file sharing, useful on a local network of Windows machines</li> <li>AFP: Apple\u2019s file sharing, useful on a local network of Apple machines</li> <li>WebDAV: Sharing over web (http) protocols</li> <li>FTP: Traditional Internet sharing protocol</li> <li>scp: Simple support for copying files</li> <li>rsync: Fast, very efficient file copying</li> <li>SFTP: file access and copying over the SSH protocol (Despite the name, the SFTP protocol at a technical level is completely unrelated to traditional FTP)</li> </ul> <p>Each of these have their place, but for copying files back and forth from your local desktop to your server, SFTP has a number of key advantages:</p> <ul> <li>No extra setup is required on your server</li> <li>Top quality security</li> <li>Allows browsing through the directory structure</li> <li>You can create and delete folders</li> </ul> <p>If you\u2019re successfully logging in via ssh from your home, work or a cybercafe then you\u2019ll also be able to use SFTP from this same location because the same underlying protocol is being used.</p> <p>By contrast, setting up your server for any of the other protocols will require extra work. Not only that, enabling extra protocols also increases the \u201cattack surface\u201d - and there\u2019s always a chance that you\u2019ll mis-configure something in a way that allows an attacker in. It\u2019s also very likely that restrictive firewall policies at a workplace will interfere with or block these protocols. Finally, while old-style FTP is still very commonly used, it sends login credentials \u201cin clear\u201d, so that your flatmates, cafe buddies or employer may be able to grab them off the network by \u201cpacket sniffing\u201d. Not a big issue with your \u201cclassroom\u201d server - but it\u2019s an unacceptable risk if you\u2019re remotely administering production servers.</p>"},{"location":"12/#sftp-client-software","title":"SFTP client software","text":"<p>What\u2019s required to use SFTP is some client software. A command-line client (unsurprisingly called sftp) comes standard on every Apple OSX or Linux system. If you\u2019re using a Linux desktop, you also have a built-in GUI client via your file manager. This will allow you to easily attach to remote servers via SFTP. (For the Nautilus file manager for example, press ctrl + L to bring up the \u2018location window\u201d and type: sftp://username@myserver-address).</p> <p>Although Windows and Apple macOS have no built-in GUI client there are  a wide range of third-party options available, both free and commercial. If you don\u2019t already have such a client installed, then choose one such as:</p> <ul> <li>WinSCP or FileZilla  - for Windows users</li> <li>CyberDuck or FileZilla  - for macOS users</li> </ul> <p>Download locations are under the RESOURCES section.</p> <p>Configuring and using your choice of these should be straightforward. The only real potential for confusion is that these clients generally support a wide range of protocols such as scp and FTP that we\u2019re not going to use. When you\u2019re asked for SERVER, give your server\u2019s IP address, PORT will be 22, and PROTOCOL will be SFTP or SSH.</p>"},{"location":"12/#instructions","title":"INSTRUCTIONS","text":"<ul> <li>Configure your chosen SFTP client to login to your server as your username</li> <li>Copy some files from your server down to your local desktop (try files from your \u201chome\u201d folder, and from <code>/var/log</code>)</li> <li>Create an \u201c<code>images</code>\u201d folder under your \u201chome\u201d folder on the server, and upload some images to it from your desktop machine</li> <li>Go up to the root directory. You should see <code>/etc</code>, <code>/bin</code> and other folders. Try to create an \u201c<code>images</code>\u201d folder here too - this should fail because you are logging in as an ordinary use, so you won\u2019t have permission to create new files or folders. In your own \u201chome\u201d directory you of course have full permission.</li> </ul> <p>Once the files are uploaded you can login via ssh and use <code>sudo</code> to give yourself the necessary power to move files about.</p>"},{"location":"12/#resources","title":"RESOURCES","text":"<ul> <li>CyberDuck</li> <li>FileZilla</li> <li>SFTP \u2013 SSH Secure File Transfer Program</li> <li>sftp File From One Server To Another</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"13/","title":"Day 13 - Users and Groups","text":"<ul> <li>Lesson video</li> <li>Complementary video</li> </ul>"},{"location":"13/#intro","title":"INTRO","text":"<p>Today you\u2019re going to set-up another user on your system. You\u2019re going to imagine that this is a help-desk person that you trust to do just a few simple tasks:</p> <ul> <li>check that the system is running</li> <li>check disk space with: <code>df -h</code></li> </ul> <p>\u2026but you also want them to be able to reboot the system, because you believe that \u201cturning it off and on again\u201d resolves most problems :-)</p> <p>You\u2019ll be covering a several new areas, so have fun!</p>"},{"location":"13/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Create a new user</li> <li>Create a new group</li> <li>Create a new user and add to an existing group</li> <li>Make a new user a sudoer</li> </ul> <p>Follow this demo</p>"},{"location":"13/#adding-a-new-user","title":"ADDING A NEW USER","text":"<p>Choose a name for your new user - we\u2019ll use \u201chelen\u201d in the examples, so to add this new user:</p> <p><code>sudo adduser helen</code></p> <p>(Names are case-sensitive in Linux, so \u201cHelen\u201d would be a completely different user)</p> <p>The \u201cadduser\u201d command works very slightly differently in each distro - if it didn\u2019t ask you for a password for your new user, then set it manually now by:</p> <p><code>sudo passwd helen</code></p> <p>You will now have a new entry in the simple text database of users: <code>/etc/passwd</code> (check it out with: <code>less</code>), and a group of the same name in the file: <code>/etc/group</code>. A hash of the password for the user is in: <code>/etc/shadow</code> (you can read this too if you use \u201csudo\u201d - check the permissions to see how they\u2019re set. For obvious reasons it\u2019s not readable to just everyone).</p> <p>If you\u2019re used to other operating systems it may be hard to believe, but these simple text files are the whole Linux user database and you could even create your users and groups by directly editing these files - although this isn\u2019t normally recommended.</p> <p>Additionally, <code>adduser</code> will have created a home directory, <code>/home/helen</code> for example, with the correct permissions.</p> <p>ATTENTION! <code>useradd</code> is not the same as <code>adduser</code>. They both create a new user, but they interact very differently. Check the link in the EXTENSION section to see those differences.</p>"},{"location":"13/#adding-a-new-group","title":"ADDING A NEW GROUP","text":"<p>Let\u2019s say we want to all of the developers in my organization to have their own group, so they can have access to the same things.</p> <p><code>sudo groupadd developers</code></p> <p>On most modern Linux systems there is a group created for each user, so user \u201cubuntu\u201d is a member of the group \u201cubuntu\u201d. But if you want, you can create a new user directly into an existing group, using the <code>ingroup</code> flag. So a new user <code>fred</code> would be created like this:</p> <p><code>sudo adduser --ingroup developers fred</code></p>"},{"location":"13/#adding-an-user-to-groups","title":"ADDING AN USER TO GROUPS","text":"<p>Users can also be part of more than one group, and groups can be added as required.</p> <p>To see what groups you\u2019re a member of, simply type: <code>groups</code></p> <p>On an Ubuntu system the first user created (in your case <code>ubuntu</code>), should be a member of the groups: <code>ubuntu</code>, <code>sudo</code> and <code>admin</code> - and if you list the <code>/var/log</code> folder you\u2019ll see your membership of the <code>sudo</code> group is why you can use <code>less</code> to read and view the contents of <code>/var/log/auth.log</code></p> <p>The \u201croot\u201d user can add a user to an existing group with the command:</p> <p><code>usermod -a -G group user</code></p> <p>so your <code>ubuntu</code> user can do the same simply by prefixing the command with <code>sudo</code>.</p> <p>Because the new user <code>helen</code> is not the first user created in the system, they don\u2019t have the power to run <code>sudo</code> - which your user has by being a member of the group <code>sudo</code>.</p> <p>So, to check which groups <code>helen</code> is a member of, you can \u201cbecome helen\u201d by switching users like this:</p> <p><code>sudo su helen</code></p> <p>Then:</p> <p><code>groups</code></p> <p>If you try to do stuff only a sudo user can do, i.e. read the contents of <code>/var/log/auth.log</code>, even using the prefix <code>sudo</code> won\u2019t work. Helen is not a sudo and has no permissions to perform this action.</p> <p>Now type \u201cexit\u201d to return to your normal user, and you can add <code>helen</code> to this group with:</p> <p><code>sudo usermod -a -G sudo helen</code></p> <p>Instead of switching users again, simply run the <code>groups helen</code> to check. Try that with <code>fred</code> too and check how everything works. </p> <p>See if any of your new users can <code>sudo reboot</code>.</p>"},{"location":"13/#clever-sudo-tricks","title":"CLEVER SUDO TRICKS","text":"<p>Your new user is just an ordinary user and so can\u2019t use <code>sudo</code> to run commands with elevated privileges - until we set them up. We could simply add them to a group that\u2019s pre-defined to be able to use sudo to do anything as root (like we did with <code>helen</code>) - but we don\u2019t want to give <code>fred</code> quite that same amount of power.</p> <p>Use <code>ls -l</code> to look at the permissions for the file: <code>/etc/sudoers</code>  This is where the magic is defined, and you\u2019ll see that it\u2019s tightly controlled, but you should be able to view it with: <code>sudo less /etc/sudoers</code>  You want to add a new entry in there for your new user, and for this you need to run a special utility: <code>visudo</code></p> <p>To run this, you can temporarily \u201cbecome root\u201d by running:</p> <p><code>sudo -i</code></p> <p>Notice that your prompt has changed to a <code>#</code></p> <p>Now simply run <code>visudo</code> to begin editing <code>/etc/sudoers</code> - typically this will use <code>nano</code>.</p> <p>All lines in <code>/etc/sudoers</code> beginning with \u201c#\u201d are optional comments. You\u2019ll want to add some lines like this:</p> <pre><code># Allow user \"fred\" to run \"sudo reboot\"\n# ...and don't prompt for a password\n#\nfred ALL = NOPASSWD:/sbin/reboot\n</code></pre> <p>You can add these line in wherever seems reasonable. The <code>visudo</code> command will automatically check your syntax, and won\u2019t allow you to save if there are mistakes - because a corrupt sudoers file could lock you out of your server!</p> <p>Type <code>exit</code> to remove your magic hat and become your normal user again - and notice that your prompt reverts to: <code>$</code></p>"},{"location":"13/#testing","title":"TESTING","text":"<p>Test by logging in as your test user and typing: <code>sudo reboot</code> Note that you can \u201cbecome\u201d helen by:</p> <p><code>sudo su helen</code></p> <p>If your ssh config allows login only with public keys, you\u2019ll need to setup <code>/home/helen/.ssh/authorized_keys</code> - including getting the owner and permissions correct. A little challenge of your understanding of this area!</p>"},{"location":"13/#extension","title":"EXTENSION","text":"<p>If you find this all pretty familiar, then you might like to check and update your knowledge on a couple of related areas:</p> <ul> <li>Restricting shell access</li> <li>Linux Password &amp; Shadow File Formats</li> <li>What\u2019s the difference between \u2018useradd\u2019 and \u2018adduser\u2019?</li> <li>How to create users and groups in Linux from the command line</li> <li>Learn how to use the $EDITOR environmental variable to set your default editor to <code>vim</code>. With this done, <code>visudo</code> will use <code>vim</code> rather than <code>nano</code> for editing.</li> </ul>"},{"location":"13/#resources","title":"RESOURCES","text":"<ul> <li>How To Edit the Sudoers File</li> <li>Sudo \u2013 An Advanced Howto</li> <li>A cartoon that should now make sense!</li> <li>Basic Linux Permissions: sudo and sudoers   (video)</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"14/","title":"Day 14 -  Who has permission?","text":"<ul> <li>Lesson video</li> <li>Complementary video</li> </ul>"},{"location":"14/#intro","title":"INTRO","text":"<p>Files on a Linux system always have associated \u201cpermissions\u201d - controlling who has access and what sort of access. You\u2019ll have bumped into this in various ways already - as an example, yesterday while logged in as your \u201cordinary\u201d user, you could not upload files directly into /var/www or create a new folder at /.</p> <p>The Linux permission system is quite simple, but it does have some quirky and subtle aspects, so today is simply an introduction to some of the basic concepts.</p> <p>This time you really do need to work your way through the material in the RESOURCES section!</p>"},{"location":"14/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Change the ownership of a file to root</li> <li>Change file permissions</li> </ul>"},{"location":"14/#ownership","title":"OWNERSHIP","text":"<p>First let\u2019s look at \u201cownership\u201d. All files are tagged with both the name of the user and the group that owns them, so if we type <code>ls -l</code> and see a file listing like this:</p> <pre><code>-rw-------  1 steve  staff      4478979  6 Feb  2011 private.txt\n-rw-rw-r--  1 steve  staff      4478979  6 Feb  2011 press.txt\n-rwxr-xr-x  1 steve  staff      4478979  6 Feb  2011 upload.bin\n</code></pre> <p>Then these files are owned by user \u201csteve\u201d, and the group \u201cstaff\u201d. Anyone that is not \u201csteve\u201d or is not part of the group \u201cstaff\u201d is considered \u201cother\u201d. Others may still have permissions to handle these files, but they do not have any ownership.</p> <p>If you want to change the ownership of a file, use the <code>chown</code> utility. This will change the user owner of file to a new user:</p> <p><code>sudo chown user file</code></p> <p>You can also change user and group at the same time:</p> <p><code>sudo chown user:group file</code></p> <p>If you only need to change the group owner, you can use <code>chgrp</code> command instead:</p> <p><code>sudo chgrp group file</code></p> <p>Since you created new users in the previous lesson, switch logins and create a few files to their home directories for testing. See how they show with <code>ls -l</code></p>"},{"location":"14/#permissions-symbolic-notation","title":"PERMISSIONS (SYMBOLIC NOTATION)","text":"<p>Looking at the <code>-rw-r--r--</code> at the start of a directory listing line, (ignore the first \u201c-\u201d for now), and see these as potentially three groups of \u201crwx\u201d: the permission granted to the \u201cuser\u201d who owns the file, the \u201cgroup\u201d, and \u201cother people\u201d - we like to call that UGO.</p> <p>For the example list above:</p> <ul> <li>private.txt   - Steve has <code>rw</code> (ie Read and Write) permission, but neither the group \u201cstaff\u201d nor \u201cother people\u201d have any permission at all</li> <li>press.txt  - Steve can Read and Write to this file too, but so can any member of the group \u201cstaff\u201d and anyone, i.e. \u201cother people\u201d, can read it</li> <li>upload.bin  - Steve has <code>rwx</code>, he can read, write and execute - i.e. run this program - but the group and others can only read and execute it</li> </ul> <p>You can change the permissions on any file with the <code>chmod</code> utility. Create a simple text file in your home directory with <code>vim</code> (e.g. tuesday.txt) and check that you can list its contents by typing: <code>cat tuesday.txt</code> or <code>less tuesday.txt</code>.</p> <p>Now look at its permissions by doing: <code>ls -ltr tuesday.txt</code></p> <pre><code>-rw-rw-r-- 1 ubuntu ubuntu   12 Nov 19 14:48 tuesday.txt\n</code></pre> <p>So, the file is owned by the user \u201cubuntu\u201d, and group \u201cubuntu\u201d, who are the only ones that can write to the file - but any other user can only read it.</p>"},{"location":"14/#changing-permissions","title":"CHANGING PERMISSIONS","text":"<p>Now let\u2019s remove the permission of the user and \u201cubuntu\u201d group to write their own file:</p> <p><code>chmod u-w tuesday.txt</code></p> <p><code>chmod g-w tuesday.txt</code></p> <p>\u2026and remove the permission for \u201cothers\u201d to read the file:</p> <p><code>chmod o-r tuesday.txt</code></p> <p>Do a listing to check the result:</p> <pre><code>-r--r----- 1 ubuntu ubuntu   12 Nov 19 14:48 tuesday.txt\n</code></pre> <p>\u2026and confirm by trying to edit the file with <code>nano</code> or <code>vim</code>. You\u2019ll find that you appear to be able to edit it - but can\u2019t save any changes. (In this case, as the owner, you have \u201cpermission to override permissions\u201d, so can can write with <code>:w!</code>). You can of course easily give yourself back the permission to write to the file by:</p> <p><code>chmod u+w tuesday.txt</code></p>"},{"location":"14/#posting-your-progress","title":"POSTING YOUR PROGRESS","text":"<p>Just for fun, create a file: secret.txt in your home folder, take away all permissions from it for the user, group and others - and see what happens when you try to edit it with <code>vim</code>.</p>"},{"location":"14/#extension","title":"EXTENSION","text":"<p>If all of this is old news to you, you may want to look into Linux ACLs:</p> <ul> <li>How to manage ACLs on Linux</li> <li>Linux Access Control Lists</li> </ul> <p>Also, SELinux and AppArmour:</p> <ul> <li>SELinux man page</li> <li>SELinux User\u2019s and Administrator\u2019s Guide</li> <li>SELinux For Mere Mortals</li> <li>Securing Ubuntu 18 04 with Apparmor</li> </ul>"},{"location":"14/#resources","title":"RESOURCES","text":"<ul> <li>How to Use the chown Command to Change the Owner of a File in Linux</li> <li>If chown can change groups, why was chgrp created?</li> <li>Linux file permissions explained</li> <li>File permissions and attributes</li> <li>File Security</li> <li>chmod Tutorial</li> <li>File and Directory Permissions</li> <li>What is \u201cumask\u201d and how does it work?</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"15/","title":"Day 15 - Deeper into repositories\u2026","text":"<ul> <li>Lesson video</li> <li>Complementary video</li> </ul>"},{"location":"15/#intro","title":"INTRO","text":"<p>Early on you installed some software packages to your server using <code>apt install</code>. That was fairly painless, and we explained how the Linux model of software installation is very similar to how \u201capp stores\u201d work on Android, iPhone, and increasingly in MacOS and Windows.</p> <p>Today however, you\u2019ll be looking \u201cunder the covers\u201d to see how this works; better understand the advantages (and disadvantages!) - and to see how you can safely extend the system beyond the main official sources.</p>"},{"location":"15/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Add a new repo</li> <li>Remove a repo</li> <li>Find out where to get a program from (apt-search)</li> <li>Install a program without apt</li> </ul>"},{"location":"15/#repositories-and-versions","title":"REPOSITORIES AND VERSIONS","text":"<p>Any particular Linux installation has a number of important characteristics:</p> <ul> <li>Version - e.g. Ubuntu 20.04, CentOS 5, RHEL 6</li> <li>\u201cBit size\u201d  - 32-bit or 64-bit</li> <li>Chip - Intel, AMD, PowerPC, ARM</li> </ul> <p>The version number is particularly important because it controls the versions of application that you can install. When Ubuntu 18.04 was released (in April 2018 - hence the version number!), it came out with Apache 2.4.29. So, if your server runs 18.04, then even if you installed Apache with <code>apt</code> five years later that is still the version you would receive. This provides stability, but at an obvious cost for web designers who hanker after some feature which later versions provide. (Security patches are made to the repositories, but by \u201cbackporting\u201d security fixes from later versions into the old stable version that was first shipped).</p>"},{"location":"15/#where-is-all-this-setup","title":"WHERE IS ALL THIS SETUP?","text":"<p>We\u2019ll be discussing the \u201cpackage manager\u201d used by the Debian and Ubuntu distributions, and dozens of derivatives. This uses the <code>apt</code> command, but for most purposes the competing <code>yum</code> and <code>dnf</code> commands used by Fedora, RHEL, CentOS and Scientific Linux work in a very similar way - as do the equivalent utilities in  other versions.</p> <p>The configuration is done with files under the /etc/apt directory, and to see where the packages you install are coming from, use <code>less</code> to view /etc/apt/sources.list where you\u2019ll see lines that are clearly specifying URLs to a \u201crepository\u201d for your specific version:</p> <pre><code> deb http://archive.ubuntu.com/ubuntu precise-security main restricted universe\n</code></pre> <p>There\u2019s no need to be concerned with the exact syntax of this for now, but what\u2019s fairly common is to want to add extra repositories - and this is what we\u2019ll deal with next.</p>"},{"location":"15/#extra-repositories","title":"EXTRA REPOSITORIES","text":"<p>While there\u2019s an amazing amount of software available in the \u201cstandard\u201d repositories (more than 3,000 for CentOS and ten times that number for Ubuntu), there are often packages not available - typically for one of two reasons:</p> <ul> <li>Stability   -   CentOS is based on RHEL (Red Hat Enterprise Linux), which is firmly focussed on stability in large commercial server installations, so games and many minor packages are not included</li> <li>Ideology   -   Ubuntu and Debian have a strong \u201csoftware freedom\u201d ethic (this refers to freedom, not price), which means that certain packages you may need are unavailable by default</li> </ul> <p>So, next you\u2019ll adding an extra repository to your system, and install software from it.</p>"},{"location":"15/#enabling-extra-repositories","title":"ENABLING EXTRA REPOSITORIES","text":"<p>First do a quick check to see how many packages you could already install. You can get the full list and details by running:</p> <p><code>apt-cache dump</code></p> <p>\u2026but you\u2019ll want to press Ctrl-c a few times to stop that, as it\u2019s far too long-winded.</p> <p>Instead, filter out just the packages names using <code>grep</code>, and count them using: <code>wc -l</code> (<code>wc</code> is \u201cword count\u201d, and the \u201c-l\u201d makes it count lines rather than words) - like this:</p> <p><code>apt-cache dump | grep \"Package:\" | wc -l</code></p> <p>These are all the packages you could now install. Sometimes there are extra packages available if you enable extra repositories. Most Linux distros have a similar concept, but in Ubuntu, often the \u201cUniverse\u201d and \u201cMultiverse\u201d repositories are disabled by default. These are hosted at Ubuntu, but with less support, and Multiverse: \u201ccontains software which has been classified as non-free \u2026may not include security updates\u201d. Examples of useful tools in Multiverse might include the compression utilities <code>rar</code> and <code>lha</code>, and the network performance tool <code>netperf</code>.</p> <p>To enable the \u201cMultiverse\u201d repository, follow the guide at:</p> <ul> <li>Community wiki for command line</li> </ul> <p>After adding this, update your local cache of available applications:</p> <p><code>sudo apt update</code></p> <p>Once done, you should be able to install <code>netperf</code> like this:</p> <p><code>sudo apt install netperf</code></p> <p>\u2026and the output will show that it\u2019s coming from Multiverse.</p>"},{"location":"15/#extension-ubuntu-ppas","title":"EXTENSION - Ubuntu PPAs","text":"<p>Ubuntu also allows users to register an account and setup software in a Personal Package Archive (PPA) - typically these are setup by enthusiastic developers, and allow you to install the latest \u201ccutting edge\u201d software.</p> <p>As an example, install and run the <code>neofetch</code> utility. When run, this prints out a summary of your configuration and hardware. This is in the standard repositories, and <code>neofetch --version</code> will show the version. If for some reason you wanted to have a later version you could install a developer\u2019s Neofetch PPA to your software sources by:</p> <p><code>sudo add-apt-repository ppa:ubuntusway-dev/dev</code></p> <p>As always, after adding a repository, update your local cache of available applications:</p> <p><code>sudo apt update</code></p> <p>Then install the package with:</p> <p><code>sudo apt install neofetch</code></p> <p>Check with <code>neofetch --version</code> to see what version you have now.</p> <p>Check with <code>apt-cache show neofetch</code> to see the details of the package.</p> <p>When you next run \u201csudo apt upgrade\u201d you\u2019ll likely be prompted to install a new version of <code>neofetch</code> - because the developers are sometimes literally making changes every day. (And if it\u2019s not obvious, when the developers have a bad day your software will stop working until they make a fix - that\u2019s the real \u201ccutting edge\u201d!)</p>"},{"location":"15/#summary","title":"SUMMARY","text":"<p>Installing only from the default repositories is clearly the safest, but there are often good reasons for going beyond them. As a sysadmin you need to judge the risks, but in the example we came up with a realistic scenario where connecting to an unstable working developer\u2019s version made sense.</p> <p>As general rule however you:</p> <ul> <li>Will seldom have good reasons for hooking into more than one or two extra repositories</li> <li>Need to read up about a repository first, to understand any potential disadvantages.</li> </ul>"},{"location":"15/#resources","title":"RESOURCES","text":"<ul> <li>Package management command comparison</li> <li>How to use yum - Introduction</li> <li>Package management with APT</li> <li>What do you mean by Free Software?</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"16/","title":"Day 16 - Archiving and compressing","text":"<ul> <li>Complementary video</li> </ul>"},{"location":"16/#intro","title":"INTRO","text":"<p>As a system administrator, you need to be able to confidently work with compressed \u201carchives\u201d of files. In particular two of your key responsibilities; installing new software, and managing backups, often require this.</p>"},{"location":"16/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Create a tarball</li> <li>Create a compressed tarball and compare sizes</li> <li>Extract files from a tarball</li> </ul>"},{"location":"16/#creating-archives","title":"CREATING ARCHIVES","text":"<p>On other operating systems, applications like WinZip, and pkzip before it, have long been used to gather a series of files and folders into one compressed file - with a .zip extension. Linux takes a slightly different approach, with the \u201cgathering\u201d of files and folders done in one step, and the compression in another.</p> <p>So, you could create a \u201csnapshot\u201d of the current files in your /etc/init.d folder like this:</p> <p><code>tar  -cvf  myinits.tar  /etc/init.d/</code></p> <p>This creates myinits.tar in your current directory.</p> <p>Note 1: The <code>-f</code> switch specifies that \u201cthe output should go to the filename which follows\u201d - so in this case the order of the switches is important. VERY IMPORTANT: <code>tar</code> considers anything after <code>-f</code> as the name of the archive that needs to be created. So, we should always use <code>-f</code> as the last flag while creating an archive.</p> <p>Note 2: The <code>-v</code> switch (verbose) is included to give some feedback - traditionally many utilities provide no feedback unless they fail.</p> <p>(The cryptic \u201ctar\u201d name? - originally short for \u201ctape archive\u201d)</p> <p>You could then compress this file with GnuZip like this:</p> <p><code>gzip myinits.tar</code></p> <p>\u2026which will create <code>myinits.tar.gz</code>. A compressed tar archive like this is known as a \u201ctarball\u201d. You will also sometimes see tarballs with a  .tgz extension - at the Linux commandline this doesn\u2019t have any meaning to the system, but is simply helpful to humans.</p> <p>In practice you can do the two steps in one with the \u201c-z\u201d switch, like this:</p> <p><code>tar -cvzf myinits.tgz /etc/init.d/</code></p> <p>This uses the <code>-c</code> switch to say that we\u2019re creating an archive; <code>-v</code> to make the command \u201cverbose\u201d; <code>-z</code> to compress the result - and <code>-f</code> to specify the output file.</p>"},{"location":"16/#tasks-for-today","title":"TASKS FOR TODAY","text":"<ul> <li>Check the links under \u201cResources\u201d to better understand this - and to find out how to extract files from an archive!</li> <li>Use <code>tar</code> to create an archive copy of some files and check the resulting size</li> <li>Run the same command, but this time use <code>-z</code> to compress - and check the file size</li> <li>Copy your archives to /tmp (with: <code>cp</code>) and extract each there to test that it works</li> </ul>"},{"location":"16/#posting-your-progress","title":"POSTING YOUR PROGRESS","text":"<p>Nothing to post today - but make sure you understand this stuff, because we\u2019ll be using it for real in the next day\u2019s session!</p>"},{"location":"16/#extension","title":"EXTENSION","text":"<ul> <li>What is a .bz2 file - and how would you extract the files from it?</li> <li>Research how absolute and relative paths are handled in tar - and why you need to be careful extracting from archives when logged in as root</li> <li>You might notice that some tutorials write \u201ctar cvf\u201d rather than \u201ctar -cvf\u201d with the switch character - do you know why?</li> </ul>"},{"location":"16/#resources","title":"RESOURCES","text":"<ul> <li>18 Tar Command Examples in Linux</li> <li>Linux TAR Command</li> <li>Linux tar command tutorial (video)</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"17/","title":"Day 17 - Build from the source","text":"<ul> <li>Complementary video</li> </ul>"},{"location":"17/#intro","title":"INTRO","text":"<p>A few days ago we saw how to authorise extra repositories for <code>apt-cache</code> to search when we need unusual applications, or perhaps more recent versions than those in the standard repositories.</p> <p>Today we\u2019re going one step further - literally going to \u201cgo to the source\u201d. This is not something to be done lightly - the whole reason for package managers is to make your life easy - but occasionally it is justified, and it is something you need to be aware of and comfortable with.</p> <p>The applications we\u2019ve been installing up to this point have come from repositories. The files there are \u201cbinaries\u201d - pre-compiled, and often customised by your distro. What might not be clear is that your distro gets these applications from a diverse range of un-coordinated development projects  (the \u201cupstream\u201d), and these developers are continuously working on new versions. We\u2019ll go to one of these, download the source, compile and install it.</p> <p>(Another big part of what package managers like <code>apt</code> do, is to identify and install any required \u201cdependencies\u201d. In the Linux world many open source apps take advantage of existing infrastructure in this way, but it can be a very tricky thing to resolve manually. However, the app we\u2019re installing today from source is relatively unusual in being completly standalone).</p>"},{"location":"17/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Download a source code tarball</li> <li>Extract and build the source</li> </ul>"},{"location":"17/#first-we-need-the-essentials","title":"FIRST WE NEED THE ESSENTIALS","text":"<p>Projects normally provide their applications as \u201csource files\u201d, written in the C, C++ or other computer languages. We\u2019re going to pull down such a source file, but it won\u2019t be any use to us until we compile it into an \u201cexecutable\u201d - a program that our server can execute. So, we\u2019ll need to first install a standard bundle of common compilers and similar tools. On Ubuntu, the package of such tools is called \u201cbuild-essential\u201d. Install it like this:</p> <p><code>sudo apt install build-essential</code></p>"},{"location":"17/#getting-the-source","title":"GETTING THE SOURCE","text":"<p>First, test that you already have <code>nmap</code> installed, and type <code>nmap -V</code>  to see what version you have. This is the version installed from your standard repositories. Next, type: <code>which nmap</code> - to see where the executable is stored.</p> <p>Now let\u2019s go to the \u201cProject Page\u201d for the developers  http://nmap.org/ and grab the very latest cutting-edge version. Look for the download page, then the section \u201cSource Code Distribution\u201d and the link for the \u201cLatest development nmap release tarball\u201d and note the URL for it - something like:</p> <pre><code> https://nmap.org/dist/nmap-7.70.tar.bz2\n</code></pre> <p>This is version 7.70, the latest development release when these notes were written, but it may be different now. So now we\u2019ll pull this down to your server. The first question is where to put it - we\u2019ll put it in your home directory, so change to your home directory with:</p> <p><code>cd</code></p> <p>then simply using <code>wget</code> (\u201cweb get\u201d), to download the file like this:</p> <p><code>wget -v https://nmap.org/dist/nmap-7.70.tar.bz2</code></p> <p>The -v (for verbose), gives some feedback so that you can see what\u2019s happening. Once it\u2019s finished, check by listing your directory contents:</p> <p><code>ls -ltr</code></p> <p>As we\u2019ve learnt, the end of the filename is typically a clue to the file\u2019s format - in this case  \u201c.bz2\u201d signals that it\u2019s a tarball compressed with the bz2 algorithm. While we could uncompress this then un-combine the files in two steps, it can be done with one command - like this:</p> <p><code>tar -j -x -v -f   nmap-7.70.tar.bz2</code></p> <p>....where the -j means \u201cuncompress a bz2 file first\u201d, -x is extract, -v is verbose - and -f says \u201cthe filename comes next\u201d. Normally we\u2019d actually do this more concisely as:</p> <p><code>tar -jxvf  nmap-7.70.tar.bz2</code></p> <p>So, lets see the results,</p> <p><code>ls -ltr</code></p> <p>Remembering that directories have a leading \u201cd\u201d in the listing, you\u2019ll see that a directory has been created :</p> <pre><code> -rw-r--r--  1 steve  steve  21633731    2011-10-01 06:46 nmap-7.70.tar.bz2\n drwxr-xr-x 20 steve  steve  4096        2011-10-01 06:06 nmap-7.70\n</code></pre> <p>Now explore the contents of this with <code>mc</code> or simply <code>cd nmap-7.70</code> - you should be able to use <code>ls</code> and <code>less</code> find and read the actual source code. Even if you know no programming, the comments can be entertaining reading.</p> <p>By convention, source files will typically include in their root directory a series of text files in uppercase such as: README and INSTALLATION. Look for these, and read them using <code>more</code> or <code>less</code>. It\u2019s important to realise that the programmers of the \u201cupstream\u201d project are not writing for Ubuntu, CentOS  - or even Linux. They have written a correct working program in C or C++ etc and made it available, but it\u2019s up to us to figure out how to compile it for our operating system, chip type etc. (This hopefully gives a little insight into the value that distributions such as CentOS, Ubuntu and utilities such as <code>apt</code>, <code>yum</code> etc add, and how tough it would be to create your own Linux From Scratch)</p> <p>So, in this case we see an INSTALL file that says something terse like:</p> <pre><code> Ideally, you should be able to just type:\n\n ./configure\n make\n make install\n\n For far more in-depth compilation, installation, and removal notes\n read the Nmap Install Guide at http://nmap.org/install/ .\n</code></pre> <p>In fact, this is fairly standard for many packages. Here\u2019s what each of the steps does:</p> <ul> <li><code>./configure</code> - is a script which checks your server (ie to see whether it\u2019s ARM or Intel based, 32 or 64-bit, which compiler you have etc). It can also be given parameters to tailor the compilation of the software, such as to not include any extra support for running in a GUI environment - something that would make sense on a \u201cheadless\u201d (remote text-only server), or to optimize for minimum memory use at the expense of speed - as might make sense if your server has very little RAM. If asked any questions, just take the defaults - and don\u2019t panic if you get some WARNING messages, chances are that all will be well.</li> <li><code>make</code>  - compiles the software, typically calling the GNU compiler <code>gcc</code>. This may generate lots of scary looking text, and take a minute or two - or as much as an hour or two for very large packages like LibreOffice.</li> <li><code>make install</code> - this step takes the compiled files, and installs that plus documentation to your system and in some cases will setup services and scheduled tasks etc. Until now you\u2019ve just been working in your home directory, but this step installs to the system for all users, so requires <code>root</code> privileges. Because of this, you\u2019ll need to actually run: <code>sudo make install</code>. If asked any questions, just take the defaults.</li> </ul> <p>Now, potentially this last step will have overwritten the <code>nmap</code> you already had, but more likely this new one has been installed into a different place.</p> <p>In general  /bin is for key parts of the operating system,  /usr/bin for less critical utilities and /usr/local/bin for software you\u2019ve chosen to manually install yourself. When you type a command it will search through each of the directories given in your PATH environment variable, and start the first match. So, if /bin/nmap exists, it will run instead of /usr/local/bin - but if you give the \u201cfull path\u201d to the version you want - such as /usr/local/bin/nmap - it will run that version instead.</p> <p>The \u201clocate\u201d command allows very fast searching for files, but because these files have only just been added, we\u2019ll need to manually update the index of files:</p> <p><code>sudo updatedb</code></p> <p>Then to search the index:</p> <p><code>locate bin/nmap</code></p> <p>This should find both your old and new copies of <code>nmap</code></p> <p>Now try running each, for example:</p> <p><code>/usr/bin/nmap -V</code></p> <p><code>/usr/local/bin/nmap -V</code></p> <p>The <code>nmap</code> utility relies on no other package or library, so it is very easy to install from source. Most other packages have many \u201cdependencies\u201d, so installing them from source by hand can be pretty challenging even when well explained (look at: http://oss.oetiker.ch/smokeping/doc/smokeping_install.en.html for a good example).</p> <p>NOTE: Because you\u2019ve done all this outside of the <code>apt</code> system, this binary won\u2019t get updates when you run <code>apt update</code>. Not a big issue with a utility like <code>nmap</code> probably, but for anything that runs as an exposed service it\u2019s important that you understand that you now have to track security alerts for the application (and all of its dependencies), and install the later fixed versions when they\u2019re available. This is a significant pain/risk for a production server.</p>"},{"location":"17/#posting-your-progress","title":"POSTING YOUR PROGRESS","text":"<p>Pat yourself on the back if you succeeded today - and let us know in the forum.</p>"},{"location":"17/#extension","title":"EXTENSION","text":"<p>Research some distributions where \u201cfrom source\u201d is normal:</p> <ul> <li>What is Linux From Scratch?</li> <li>What is Gentoo?</li> <li>The Arch Build System</li> </ul> <p>None of these is typically used in production servers, but investigating any of them will certainly increase your knowledge of how Linux works \u201cunder the covers\u201d - asking you to make many choices that the production-ready distros such as RHEL and Ubuntu do on your behalf by choosing what they see as sensible defaults.</p>"},{"location":"17/#resources","title":"RESOURCES","text":"<ul> <li>The magic behind configure, make, make install</li> <li>Installing From Tarballs</li> <li>How to rebuild an existing package from source</li> <li>Compiling things on Ubuntu the Easy Way</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"18/","title":"Day 18 - Logs, monitoring and troubleshooting","text":"<ul> <li>Lesson video</li> </ul>"},{"location":"18/#intro","title":"INTRO","text":"<p>When you\u2019re administering a remote server, logs are your best friend, but disk space problems can be your worst enemy - so while Linux applications are generally very good at generating logs, they need to be controlled.</p> <p>The <code>logrotate</code> application keeps your logs in check. Using this, you can define how many days of logs you wish to keep; split them into manageable files; compress them to save space, or even keep them on a totally separate server.</p> <p>Good sysadmins love automation - having the computer automatically do the boring repetitive stuff Just Makes Sense.</p>"},{"location":"18/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Check the logs for apache2 that are Severity 3</li> <li>Edit logrotate configuration for apache2 to rotate daily</li> </ul>"},{"location":"18/#are-your-logs-rotating","title":"ARE YOUR LOGS ROTATING?","text":"<p>Look into your logs directories - /var/log, and subdirectories like /var/log/apache2. Can you see that your logs are already being rotated? You should see a /var/log/syslog file, but also a series of older compressed versions with names like /var/log/syslog.1.gz</p>"},{"location":"18/#when-do-they-rotate","title":"WHEN DO THEY ROTATE?","text":"<p>You will recall that <code>cron</code> is generally setup to run scripts in /etc/cron.daily - so look in there and you should see a script called <code>logrotate</code> - or possibly 00logrotate to force it to be the first task to run.</p>"},{"location":"18/#configuring-logrotate","title":"CONFIGURING LOGROTATE","text":"<p>The overall configuration is set in /etc/logrotate.conf - have a look at that, but then also look at the files under the directory /etc/logrotate.d, as the contents of these are merged in to create the full configuration. You will probably see one called apache2, with contents like this:</p> <pre><code> /var/log/apache2/*.log {\n weekly\n missingok\n rotate 52\n compress\n delaycompress\n notifempty\n create 640 root adm\n }\n</code></pre> <p>Much of this is fairly clear: any apache2 .log file will be rotated each week, with 52 compressed copies being kept.</p> <p>Typically when you install an application a suitable logrotate \u201crecipe\u201d is installed for you, so you\u2019ll not normally be creating these from scratch. However, the default settings won\u2019t always match your requirements, so it\u2019s perfectly reasonable for you as the sysadmin to edit these - for example, the default apache2 recipe above creates 52 weekly logs, but you might find it more useful to have logs rotated daily, a copy automatically emailed to an auditor, and just 30 days worth kept on the server.</p>"},{"location":"18/#resources","title":"RESOURCES","text":"<ul> <li>The Ultimate Logrotate Command Tutorial</li> <li>LINUX: openSUSE and logrotate</li> <li>Use logrotate to Manage Log Files</li> </ul>"},{"location":"18/#troubleshoot-and-make-a-sad-server-happy","title":"TROUBLESHOOT AND MAKE A SAD SERVER HAPPY!","text":"<p>Practice what you\u2019ve learned with some challenges at SadServers.com:</p> <ul> <li>\u201cManhattan\u201d: can\u2019t write data into database.</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"19/","title":"Day 19 - Inodes, symlinks and other shortcuts","text":"<ul> <li>Complementary video</li> </ul>"},{"location":"19/#intro","title":"INTRO","text":"<p>Today\u2019s topic gives a peek \u201cunder the covers\u201d at the technical detail of how files are stored.</p> <p>Linux supports a large number of different \u201cfilesystems\u201d - although on a server you\u2019ll typically be dealing with just ext3 or ext4  and perhaps btrfs - but today we\u2019ll not be dealing with any of these; instead with the layer of Linux that sits above all of these - the Linux Virtual Filesystem.</p> <p>The VFS is a key part of Linux, and an overview of it and some of the surrounding concepts is very useful in confidently administering a system.</p>"},{"location":"19/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Create a hard link</li> <li>Create a soft link</li> <li>Create aliases</li> </ul>"},{"location":"19/#the-next-layer-down","title":"THE NEXT LAYER DOWN","text":"<p>Linux has an extra layer between the filename and the file\u2019s actual data on the disk - this is the inode. This has a numerical value which you can see most easily in two ways:</p> <p>The <code>-i</code> switch on the <code>ls</code> command:</p> <pre><code> ls -li /etc/hosts\n 35356766 -rw------- 1 root root 260 Nov 25 04:59 /etc/hosts\n</code></pre> <p>The <code>stat</code> command:</p> <pre><code> stat /etc/hosts\n File: `/etc/hosts'\n Size: 260           Blocks: 8           IO Block: 4096   regular file\n Device: 2ch/44d     Inode: 35356766     Links: 1\n Access: (0600/-rw-------)  Uid: (  0/   root)   Gid: ( 0/  root)\n Access: 2012-11-28 13:09:10.000000000 +0400\n Modify: 2012-11-25 04:59:55.000000000 +0400\n Change: 2012-11-25 04:59:55.000000000 +0400\n</code></pre> <p>Every file name \u201cpoints\u201d to an inode, which in turn points to the actual data on the disk. This means that several filenames could point to the same inode - and hence have exactly the same contents. In fact this is a standard technique - called a \u201chard link\u201d. The other important thing to note is that when we view the permissions, ownership and dates of filenames, these attributes are actually kept at the inode level, not the filename. Much of the time this distinction is just theoretical, but it can be very important.</p>"},{"location":"19/#two-sorts-of-links","title":"TWO SORTS OF LINKS","text":"<p>Work through the steps below to get familiar with hard and soft linking:</p> <p>First move to your home directory with:</p> <p><code>cd</code></p> <p>Then use the <code>ln</code> (\u201clink\u201d) command to create a \u201chard link\u201d, like this:</p> <p><code>ln /etc/passwd link1</code></p> <p>and now a \u201csymbolic link\u201d (or \u201csymlink\u201d), like this:</p> <p><code>ln -s /etc/passwd link2</code></p> <p>Now use <code>ls -li</code> to view the resulting files, and <code>less</code> or <code>cat</code> to view them.</p> <p>Note that the permissions on a symlink generally show as allowing everthing - but what matters is the permission of the file it points to.</p> <p>Both hard and symlinks are widely used in Linux, but symlinks are especially common - for example:</p> <p><code>ls -ltr /etc/rc2.d/*</code></p> <p>This directory holds all the scripts that start when your machine changes to \u201crunlevel 2\u201d (its normal running state) - but you\u2019ll see that in fact most of them are symlinks to the real scripts in /etc/init.d</p> <p>It\u2019s also very common to have something like :</p> <pre><code> prog\n prog-v3\n prog-v4\n</code></pre> <p>where the program \u201cprog\u201d, is a symlink - originally to v3, but now points to v4 (and could be pointed back if required)</p> <p>Read up in the resources provided, and test on your server to gain a better understanding. In particular, see how permissions and file sizes work with symbolic links versus hard links or simple files</p>"},{"location":"19/#the-differences","title":"The Differences","text":"<p>Hard links:</p> <ul> <li>Only link to a file, not a directory</li> <li>Can\u2019t reference a file on a different disk/volume</li> <li>Links will reference a file even if it is moved</li> <li>Links reference inode/physical locations on the disk</li> </ul> <p>Symbolic (soft) links:</p> <ul> <li>Can link to directories</li> <li>Can reference a file/folder on a different hard disk/volume</li> <li>Links remain if the original file is deleted</li> <li>Links will NOT reference the file anymore if it is moved</li> <li>Links reference abstract filenames/directories and NOT physical locations.</li> <li>They have their own inode</li> </ul>"},{"location":"19/#extension","title":"EXTENSION","text":"<ul> <li>Anatomy of the Linux file system</li> </ul>"},{"location":"19/#resources","title":"RESOURCES","text":"<ul> <li>Hard and soft links</li> <li>Linux inodes Explained</li> <li>Everything You Ever Wanted to Know About inodes on Linux</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"20/","title":"Day 20 - Scripting","text":"<ul> <li>Complementary video</li> </ul>"},{"location":"20/#intro","title":"INTRO","text":"<p>Today is the final session for the course. Pat yourself on the back if you worked your way through all lessons!</p> <p>You\u2019ve seen that a continual emphasis for a sysadmin is to automate as much as possible, and also how in Linux the system is very \u201ctransparent\u201d - once you know where to look!</p> <p>Today, on this final session for the course, we\u2019ll cover how to write small programs or \u201cshell scripts\u201d to help manage your system.</p> <p>When typing at the Linux command-line you\u2019re directly communicating with \u201cthe command interpreter\u201d, also known as \u201cthe shell\u201d. Normally this shell is bash, so when you string commands together to make a script the result can be called either a \u2018\u201cshell script\u201d, or a \u201cbash script\u201d.</p> <p>Why make a script rather than just typing commands in manually?</p> <ul> <li>It saves typing. Remember when we searched through the logs with a long string of <code>grep</code>, <code>cut</code> and <code>sort</code> commands? If you need to do something like that more than a few times then turning it into a script saves typing - and typos!</li> <li>Parameters. One script can be used to do several things depending on what parameters you provide</li> <li>Automation. Pop your script in /etc/cron.daily and it will run each day, or install a symlink to it in the appropriate /etc/rc.d folder and you can have it run each time the system is shut down or booted up.</li> </ul>"},{"location":"20/#your-tasks-today","title":"YOUR TASKS TODAY","text":"<ul> <li>Write a short script that list the top 3 IP addresses that tried to login into your server</li> </ul>"},{"location":"20/#start-with-a-shebang","title":"START WITH A SHEBANG!","text":"<p>Scripts are just simple text files, but if you set the \u201cexecute\u201d permissions on them then the system will look for a special line starting with the two characters \u201c#\u201d and \u201c!\u201d - referred to as the \u201cshebang\u201d (or \u201ccrunchbang\u201d) at the top of the file.</p> <p>This line typically looks like this:</p> <pre><code> #!/bin/bash\n</code></pre> <p>Normally anything starting with a \u201c#\u201d character would be treated as a comment, but in the first line and followed by a \u201c!\u201d, it\u2019s interpreted as: \u201cplease feed the rest of this to the /bin/bash program, which will interpret it as a script\u201d. All of our scripts will be written in the bash language - the same as you\u2019ve been typing at the command line throughout this course - but scripts can also be written in many other \u201cscripting languages\u201d, so a script in the Perl language might start with <code>#!/usr/bin/perl</code> and one in Python <code>#!/usr/bin/env python3</code></p>"},{"location":"20/#your-first-script","title":"YOUR FIRST SCRIPT","text":"<p>You\u2019ll write a small script to list out who\u2019s been most recently unsuccessfully trying to login to your server, using the entries in /var/log/auth.log.</p> <p>Use <code>vim</code> to create a file, <code>attacker</code>, in your home directory with this content:</p> <pre><code> #!/bin/bash\n #\n #   attacker - prints out the last failed login attempt\n #\n echo \"The last failed login attempt came from IP address:\"\n grep -i \"disconnected from\" /var/log/auth.log|tail -1| cut -d: -f4| cut -f7 -d\" \"\n</code></pre> <p>Putting comments at the top of the script like this isn\u2019t strictly necessary (the computer ignores them), but it\u2019s a good professional habit to get into.</p> <p>To make it executable type:</p> <p><code>chmod +x attacker</code></p> <p>Now to run this script, you just need to refer to it by name - but the current directory is (deliberately) not in your $PATH, so you need to do this either of two ways:</p> <pre><code> /home/support/attacker\n ./attacker\n</code></pre> <p>Once you\u2019re happy with a script, and want to have it easily available, you\u2019ll probably want to move it somewhere on your $PATH - and /usr/local/bin is a normally the appropriate place, so try this:</p> <p><code>sudo mv attacker /usr/local/bin/attacker</code></p> <p>\u2026and now it will Just Work whenever you type <code>attacker</code></p>"},{"location":"20/#extending-the-script","title":"EXTENDING THE SCRIPT","text":"<p>You can expand this script so that it requires a parameter and prints out some syntax help when you don\u2019t give one. There are a few new tricks in this, so it\u2019s worth studying:</p> <pre><code>#!/usr/bin/env bash\n#\n#   topattack - list the most persistent attackers\n#\n# Ensure \"graceful exit\" in case the script was sourced.\nif [[ ${BASH_SOURCE[0]} != \"$0\" ]]; then\n        echo \"Don't source this file. Execute it.\";\n        return 1;\nfi;\n# Display usage hint if the script was executed with no/invalid argument.\nif [[ -z \"$1\" ]] || [[ ! \"$1\" =~ ^[0-9]+$ ]] || (( $1 &lt; 1 )); then\n        echo -e \"\\nUsage:\\n\\t$(basename \"${BASH_SOURCE:-$0}\") &lt;NUM&gt;\";\n        echo \"Lists the top &lt;NUM&gt; attackers by their IP address.\";\n        echo -e \"(&lt;NUM&gt; can only be a natural number)\\n\";\n        exit 0;\nfi;\n# Make sure the log file is available for parsing by this user.\nif [[ ! -f \"/var/log/auth.log\" ]] || [[ ! -r \"/var/log/auth.log\" ]]; then\n        echo -e \"\\nI could not read the log file: '/var/log/auth.log'\\n\";\n        exit 2;\nfi;\n# Use 'cat' command and \"here document\" to avoid repeated 'echo' commands.\ncat &lt;&lt; _EndOfHeader_\n\nTop $1 persistent recent attackers\n\nAttempts      IP\n-----------------------\n_EndOfHeader_\n# Too long command pipelines can be spanned over multiple lines with \\\n# followed immediately by a newline character (i.e. ENTER, RETURN, '\\n')\ngrep 'Disconnected from authenticating user root' \"/var/log/auth.log\" \\\n | cut -d':' -f 4 | cut -d' ' -f 7 | sort | uniq -c | sort -nr | head -n \"$1\";\n</code></pre> <p>Again, use vim to create <code>\"topattack\"</code>, <code>chmod</code> to make it executable and <code>mv</code> to move it into /usr/local/bin once you have it working correctly.</p> <p>(BTW, you can use <code>whois</code> to find details on any of these IPs - just be aware that the system that is \u201cattacking\u201d you may be an innocent party that\u2019s been hacked into).</p> <p>A collection of simple scripts like this is something that you can easily create to make your sysadmin tasks simpler, quicker and less error prone.</p> <p>If automating and scripting many of your daily tasks sounds like something you really like doing, you might also want to script the setup of your machines and services. Even though you can do this using bash scripting like shown in this lesson, there are some benefits in choosing an orchestration framework like ansible, cloudinit or terraform. Those frameworks are outside of the scope of this course, but might be worth reading about.</p> <p>And yes, this is the last lesson - so please, feel free to write a review on how the course went for you and what you plan to do with your new knowledge and skills!</p>"},{"location":"20/#resources","title":"RESOURCES","text":"<ul> <li>Learn Bash Scripts - Tutorial (video)</li> <li>Bash scripting tutorial</li> <li>BASH Programming - Introduction HOW-TO</li> <li>How to be a good (and lazy) System Administrator</li> </ul> <p>Some rights reserved. Check the license terms here</p>"},{"location":"21/","title":"Day 21 - What next?","text":"<ul> <li>Complementary video</li> </ul> <p>What is this madness \u2013 surely the course was for just 20 days?</p> <p>Yes, but hopefully you\u2019ll go on learning, so here\u2019s a few suggestions for directions that you might take.</p>"},{"location":"21/#play-with-your-server","title":"Play with your server","text":"<p>You\u2019re familiar with the server you used during the course, so keep working with it. Maybe uninstall Apache2 and install NGINX, a competing webserver. Keep a running stat on ssh \u201cattackers\u201d. Whatever. A free AWS will last a year, and a $5/mo server should be something you can easily justify.</p>"},{"location":"21/#add-services-that-youll-use","title":"Add services that you\u2019ll use","text":"<p>You should now be capable of following tutorials on installing and running your own instance of Minecraft, Wordpress, WireGuard VPN, or Mediawiki. Expect to have some problems \u2013 it\u2019s all good experience!</p> <p>Take a look at Server World for some inspiration.</p>"},{"location":"21/#extend-your-learning","title":"Extend your learning","text":"<p>Stop browsing articles on Gnome, KDE or i3 \u2013 and start checking out any articles like \u201c20 Linux commands every sysadmin should know\u201d. Try these out, delve into the options. Like learning a foreign vocabulary, you will only be able to use these \u201cwords\u201d if you know them!</p> <p>Check out Linux Journey if you haven\u2019t already, specially if you are still pretty new to Linux and would like to see a different learning approach. Linux 101 Hacks is also a good resource.</p> <p>Practice what you\u2019ve learned with some challenges at SadServers.com. There you\u2019ll find a collection of scenarios where you have to do, fix or hack something in a Linux server. It\u2019s great to exercise your troubleshooting skills without messing with your own server.</p> <p>To get crazy fast in the command line, try Command Line Challenge, practicelinux.com, learnshell.org and commandlinefu.com.</p> <p>If your next level goal is to get into DevOps, take a look at the DevOps Roadmap.</p>"},{"location":"21/#certifications","title":"Certifications","text":"<p>If you\u2019re looking to do Linux professionally, and you don\u2019t have an impressive CV or resume already, then you should be aiming at getting a Linux certification. There are really just three certs/tracks that count:</p> <ul> <li>CompTIA Linux+ - one and done exam, distro independent but doesn\u2019t hold much value in the market. Do this if you don\u2019t want to get too deep into Linux, or you have other CompTIA tracks going on and an employer is paying for them.</li> <li>LPI LPIC-1: Linux Administrator \u2013 Very extensive description of the coverage of their various certs/courses. You can go very deep with this exams, they cover everything you can think of pure Linux. Not so popular with employers but the knowledge certainly holds it value.</li> <li>Red Hat \u2013 You could spend a lot of time and money here, but it might well pay off! Geared to RedHat Enterprise Linux distribution and its particularities, it is a practical exam (the others are multiple question) and it\u2019s well known in Enterprise circles, it really pops up in any resume.</li> </ul> <p>Even if you don\u2019t want/need certs, the outline of the topics in these references can give you a good idea of areas to focus on in your self-learning.</p>"},{"location":"21/#affordable-professional-training","title":"Affordable professional training","text":"<ul> <li>LinkedIn Learning</li> <li>Udemy</li> <li>CBT Nuggets</li> </ul>"},{"location":"21/#show-your-appreciation","title":"Show your appreciation!","text":"<p>Steve Brorens (@snori74) was a collector of postcards and enjoyed greatly all the \u201cSnail Mail\u201d he received from the students.</p> <p>But since his passing there\u2019s nowhere to send postcards anymore. You can show your appreciation for the course by letting everyone else know how awesome it was! Recommend the course to other people, invite your friends to do the challenge together, have fun! Show the world you finished the challenge by posting about it on social media.</p>"},{"location":"21/#contribute","title":"Contribute","text":"<p>Livia Lima is the one currently maintaining the material. But she\u2019s only one person and appreciates any help to keep this challenge running consistently every month, and available to everyone.</p> <p>If you\u2019d like to contribute, here a few things you can do:</p> <ul> <li>Answer other students\u2019 questions in our channels. Help a friend through the challenge.</li> <li>Correct typos, dead links, etc by submitting a correction request to the source material.</li> <li>Suggest improvements by submitting a feature request to the source material.</li> <li>Help moderate Lemmy, Reddit or Discord. Are you a whiz in one (or more) of those platforms? Help admin them.</li> <li>Support the infrastructure by donating or sponsoring. The challenge is free but the website servers and the domains costs money, so we appreciate if you can spare a buck.</li> </ul> <p>Thanks for everything and happy Linuxing!</p>"},{"location":"how-this-works/","title":"PLEASE READ THIS FIRST! HOW THIS WORKS &amp; FAQ","text":""},{"location":"how-this-works/#resources","title":"RESOURCES","text":"<ul> <li>Website of the course</li> <li>Full lesson source </li> <li>Complementary video playlists</li> <li>Monthly lessons on Lemmy</li> <li>Monthly lessons on Reddit</li> <li>Chat with Discord</li> </ul>"},{"location":"how-this-works/#how-this-works","title":"HOW THIS WORKS","text":""},{"location":"how-this-works/#in-a-nutshell","title":"In a nutshell","text":"<ul> <li>Completely free and open source</li> <li>Focused on practical skills</li> <li>Heavily hands-on</li> <li>Starts at the 1<sup>st</sup> Monday of each month</li> <li>Runs for 20 weekdays (Mon-Fri)</li> <li>Often points to curated external links, expanding on the topic of the day.</li> <li>Much less \u2018formal\u2019 than RHEL or Linux Foundation training</li> </ul>"},{"location":"how-this-works/#requirements","title":"Requirements","text":"<ul> <li>A cloud-based Ubuntu Linux server - full instructions on how to set this up are in the \u2018Day 0\u2019 lessons</li> <li>Basic computer literacy - no prior knowledge of Linux is required but you should be fairly confortable operating your own Windows/Mac machine</li> <li>Requires a daily commitment of 1-2 hours each day for a month but can be self-paced</li> </ul>"},{"location":"how-this-works/#frequently-asked-questions-faq","title":"FREQUENTLY ASKED QUESTIONS - FAQ","text":""},{"location":"how-this-works/#is-this-course-for-me","title":"Is this course for me?","text":"<p>This course is primarily aimed at two groups:</p> <ol> <li>Linux users who aspire to get Linux-related jobs in industry, such as junior Linux sysadmin, devops-related work and similar, and</li> <li>Windows server admins who want to expand their knowledge to be able to work with Linux servers.</li> </ol> <p>However, many others have happily used the course simply to improve their Linux command line skills or to learn Linux for the first time \u2013 and that\u2019s just fine too.</p>"},{"location":"how-this-works/#will-i-pass-lpicrhcalfcslinux-certification-if-i-take-this-course","title":"Will I pass LPIC/RHCA/LFCS/Linux+ certification if I take this course?","text":"<p>NO! This is NOT a preparation course for any Linux certification exam. It can help you, sure, but please refer to a more specific cert training if that\u2019s what you are aiming for.</p>"},{"location":"how-this-works/#when-does-it-start","title":"When does it start?","text":"<p>The course always starts on the first Monday of the month. One of the key elements of the course is that the material is delivered in 20 bite-sized lessons, one each workday.</p>"},{"location":"how-this-works/#how-long-does-it-take-how-many-hours-should-i-dedicate-to-it","title":"How long does it take? How many hours should I dedicate to it?","text":"<p>Depending on your experience and dedication, you can expect to spend 1-2 hours going through each lesson. The first few days are pretty basic and it might take you just minutes, but there\u2019s generally some \u201cExtension\u201d items to spice things up a bit.</p>"},{"location":"how-this-works/#i-just-learned-about-the-challenge-and-its-already-on-day-x-should-i-wait-for-next-month-to-start","title":"I just learned about the challenge and it\u2019s already on Day X. Should I wait for next month to start?","text":"<p>Only if you want to. The material is available year-round so you can totally self-pace this if you prefer.</p>"},{"location":"how-this-works/#do-i-really-need-a-cloud-based-server","title":"Do I really need a cloud-based server?","text":"<p>Yes, if you\u2019re in the target audience (see above) you definitely should. The fact that such a server is very remote, and open to attack from the whole Internet, \u201cmakes it real\u201d. Learning how to setup such a VPS is also a handy skill for any sysadmin.</p> <p>Instructions for setting up a suitable server with a couple of providers are in the \u201cDay 0\u201d lessons. By all means use a different provider, but ensure you use Ubuntu LTS (preferably the latest version) and either use public key authentication or a Long, Strong, Unique password (we also have instructions on how to do that).</p> <p>Of course, you\u2019re perfectly entitled to use a local VM, a Raspberry Pi or even just WSL instead \u2013 and all of these will work fine for the course material. Just keep in mind what you are missing.</p>"},{"location":"how-this-works/#but-what-if-i-dont-have-a-credit-card-or-dont-want-to-use-one-to-setup-an-awsazuregcp-server","title":"But what if I don\u2019t have a credit card (or don\u2019t want to use one) to setup an AWS/Azure/GCP server?","text":"<p>Please read Day 0 - Creating Your Own Local Server. There are other options of cloud providers and different payment options. But if none of them works for you, try creating your own local VM.</p>"},{"location":"how-this-works/#but-what-if-i-dont-want-to-use-a-cloud-provider-i-have-a-servervm-at-home","title":"But what if I don\u2019t want to use a cloud provider? I have a server/VM at home.","text":"<p>Then use your server. Check the post Day 0 - Creating Your Own Local Server</p>"},{"location":"how-this-works/#why-ubuntu-can-i-use-another-distro","title":"Why Ubuntu, can I use another distro?","text":"<p>The notes assume Ubuntu Server LTS (latest version) and it would be messy to include instructions/variations for other distros (at least right now). If you use Debian or other Debian-based distros (Mint, Pop!OS, Kali) it will make little to no difference because they all have the same structure.</p> <p>But if you choose RedHat-based distros (Fedora, CentOS, AlmaLinux) or distros like Arch, Gentoo, OpenSUSE, you yourself will need to understand and cope with any differences (e.g. apt vs yum vs pacman).</p> <p>If none of those names make any sense to you, you shouldn\u2019t be picking distros. Go read Linux Journey first lesson instead.</p>"},{"location":"how-this-works/#should-i-be-stopping-or-terminating-my-server-when-not-in-use","title":"Should I be stopping or terminating my server when not in use?","text":"<p>Using a free-tier VPS, the load of the course does not exceed any thresholds. You can leave it running during the challenge but it\u2019s good to keep an eye on it (i.e. don\u2019t forget about it later or your provider will start charging you).</p>"},{"location":"how-this-works/#i-noticed-there-was-a-kernel-update-but-no-one-said-to-reboot","title":"I noticed there was a kernel update, but no one said to reboot.","text":"<p>Reboot it. This is one of the few occasions you will need to reboot your server, go for it. The command for that is <code>sudo reboot now</code></p>"},{"location":"how-this-works/#i-still-have-questionsdoubts-what-do-i-do","title":"I still have questions/doubts! What do I do?!","text":"<p>Feel free to post questions or comments in Lemmy, Reddit or chat using the Discord server.</p> <p>If you are inclined to contribute to the material and had the means to do it (i.e. a github account) you can submit an issue to the source directly.</p>"},{"location":"how-this-works/#credits","title":"CREDITS","text":"<p>The magnificent Steve Brorens is the mastermind behind the Linux Upskill Challenge. Unfortunately, he passed away but not before ensuring the course would continue to run in his absence. We miss you, snori.</p> <p>Livia Lima is the one currently maintaining the material. Give her a shout out on Mastodon or LinkedIn.</p>"}]}